<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tests on Words of Luke Silva</title>
    <link>//localhost:1313/tags/tests/</link>
    <description>Recent content in Tests on Words of Luke Silva</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Fri, 18 Mar 2022 11:45:29 -0300</lastBuildDate><atom:link href="//localhost:1313/tags/tests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testes de unidade com NUnit para aplica√ß√µes C#</title>
      <link>//localhost:1313/posts/dotnet-unit-tests/</link>
      <pubDate>Fri, 18 Mar 2022 11:45:29 -0300</pubDate>
      
      <guid>//localhost:1313/posts/dotnet-unit-tests/</guid>
      <description>&lt;p&gt;Basicamente, testes automatizados s√£o uma forma de automatizar o processo de revis√£o e valida√ß√£o de um software atrav√©s de uma ferramenta program√°vel. Esse processo, que antes podia ser extremamente trabalhoso e demorado, pode ser feito em minutos &amp;ndash; ou at√© mesmo segundos, dependendo dos tipos e da quantidade de testes existentes na sua aplica√ß√£o.&lt;/p&gt;
&lt;p&gt;Mike Cohn criou o conceito de pir√¢mide de testes no livro &amp;ldquo;Succeeding with Agile&amp;rdquo;. √â basicamente uma forma de te fazer pensar nas v√°rias camadas de testes e em como elas devem estar presentes:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ey9qc5peuj6d1jwuby.png&#34; alt=&#34;Pir√¢mide de testes cunhada po Cohn. A base dela √© composta por testes de unidade, seguida por testes de servi√ßos e por fim testes de ui. Quanto mais baixo o n√≠vel do teste na pir√¢mide, mais desacoplado e mais r√°pido ele √©&#34;&gt;
Quanto mais baixo o n√≠vel do teste na pir√¢mide, mais desacoplado e mais r√°pido ele √©, al√©m de mais numeroso.&lt;/p&gt;</description>
      <content>&lt;p&gt;Basicamente, testes automatizados s√£o uma forma de automatizar o processo de revis√£o e valida√ß√£o de um software atrav√©s de uma ferramenta program√°vel. Esse processo, que antes podia ser extremamente trabalhoso e demorado, pode ser feito em minutos &amp;ndash; ou at√© mesmo segundos, dependendo dos tipos e da quantidade de testes existentes na sua aplica√ß√£o.&lt;/p&gt;
&lt;p&gt;Mike Cohn criou o conceito de pir√¢mide de testes no livro &amp;ldquo;Succeeding with Agile&amp;rdquo;. √â basicamente uma forma de te fazer pensar nas v√°rias camadas de testes e em como elas devem estar presentes:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ey9qc5peuj6d1jwuby.png&#34; alt=&#34;Pir√¢mide de testes cunhada po Cohn. A base dela √© composta por testes de unidade, seguida por testes de servi√ßos e por fim testes de ui. Quanto mais baixo o n√≠vel do teste na pir√¢mide, mais desacoplado e mais r√°pido ele √©&#34;&gt;
Quanto mais baixo o n√≠vel do teste na pir√¢mide, mais desacoplado e mais r√°pido ele √©, al√©m de mais numeroso.&lt;/p&gt;
&lt;p&gt;H√° in√∫meros tipos de teste &amp;ndash; muitos dos quais eu mesmo desconhe√ßo a fundo &amp;ndash; mas abordarei apenas os testes de unidade. Eles possuem esse nome pois tendem as menores unidades de classes e m√©todos de forma isolada do resto da aplica√ß√£o: sem acoplamento, nem nada. Apenas verifica√ß√µes para garantir que eles funcionem conforme o esperado, que as vari√°veis tenham os valores esperados etc.&lt;/p&gt;
&lt;p&gt;Uma disciplina importante para criar testes √© aquela chamada de TDD - Desenvolvimento orientado a testes. Nela, primeiro se escreve os testes, depois o c√≥digo para que o teste funcione, depois o c√≥digo √© refatorado para que se torne a melhor vers√£o que puder ser (esse √∫ltimo passo costuma ser bastante ignorado, gerando d√©bitos t√©cnicos).&lt;/p&gt;
&lt;p&gt;Ok, mas por que come√ßar pelos testes e n√£o pelo c√≥digo ? Porque para criar uma solu√ß√£o, √© necess√°rio saber o que precisa ser criado. √â necess√°rio saber de antem√£o o que uma classe deve fazer, o que um m√©todo deve fazer, o valor que uma vari√°vel deve ter etc. Sem isso em mente, √© muito f√°cil assumir que um resultado qualquer √© o correto. E √© assim que nascem os bugs üêû!&lt;/p&gt;
&lt;p&gt;Sem mais delongas, bora pro c√≥digo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/KGdKKipVBu9vO5hKkb/giphy.gif&#34; alt=&#34;Killjoy do jogo Valorant, em frente a um computador, arrumando os √≥culos no pr√≥prio rosto&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;m√£os-√†-obra&#34;&gt;M√£os √† obra&lt;/h2&gt;
&lt;p&gt;Criei uma aplica√ß√£o console para exemplificar. Nela, criarei uma classe &amp;ldquo;Conta&amp;rdquo; com as seguintes especifica√ß√µes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma pessoa pode depositar qualquer valor maior que zero na conta;&lt;/li&gt;
&lt;li&gt;Uma pessoa pode sacar valores maiores que 0 e menores ou iguais ao saldo total;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adicionei um projeto NUnit com o Visual Studio. Nele, criei uma classe chamada &lt;strong&gt;ContaTests&lt;/strong&gt;, conforme abaixo. O atributo &lt;strong&gt;[TestFixture]&lt;/strong&gt; indica que uma classe possui testes.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[TestFixture]
public class ContaTests
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;E ent√£o parti para o teste do primeiro m√©todo. Para que um m√©todo seja detectado como teste, √© necess√°rio adicionar o atributo &lt;strong&gt;[Test]&lt;/strong&gt; acima dele. Quanto ao nome do m√©todo de teste, fiz baseando-me em algumas recomenda√ß√µes que podem ser encontradas &lt;a href=&#34;https://docs.microsoft.com/pt-br/dotnet/core/testing/unit-testing-best-practices&#34;&gt;neste link.&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Test]
public void Depositar_RetornaSaldoMaisValorDepositado()
{
    // Arrange 
    
    // Act
    
    // Assert
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Gosto de deixar os 3 coment√°rios em todos os testes que crio para separar bem as fases dele. Essas fases formam o padr√£o AAA, muito utilizado na ind√∫stria, e correspondem a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange: fase na qual √© necess√°rio preparar teste preparando as vari√°veis, criando inst√¢ncias de objeto necess√°rias etc.;&lt;/li&gt;
&lt;li&gt;Act: fase na qual o m√©todo a ser testado √© executado;&lt;/li&gt;
&lt;li&gt;Assert: fase na qual √© feita a verifica√ß√£o de que o resultado obtido est√° de acordo com o esperado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Na primeira fase, criei apenas uma inst√¢ncia da classe &lt;strong&gt;Conta&lt;/strong&gt;, que ainda n√£o existe, e ent√£o criei uma vari√°vel com o valor que espero obter como resultado do teste.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Arrange 
Conta conta = new Conta(&amp;#34;Lucas&amp;#34;, 100);
decimal saldoEsperado = 200;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Na fase de a√ß√£o, executei o m√©todo e armazenei o resultado em uma vari√°vel:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Act
var resultado = conta.Depositar(100);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;E por fim, fiz a verifica√ß√£o de que o resultado era igual ao saldoEsperado. Para isso, usei a classe Assert do NUnit. Ela cont√©m v√°rios m√©todos est√°ticos para testar in√∫meras situa√ß√µes, como listas, igualdades, nulos etc.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Assert
Assert.AreEqual(saldoEsperado, resultado);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O teste final ficou da seguinte forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Test]
public void Depositar_RetornaSaldoMaisValorDepositado()
{
    // Arrange 
    Conta conta = new Conta(&amp;#34;Lucas&amp;#34;, 100);
    decimal saldoEsperado = 200;

    Act
    var resultado = conta.Depositar(100);

    Assert
    Assert.AreEqual(saldoEsperado, resultado);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O teste n√£o compilar√° no primeiro momento pois a classe &lt;strong&gt;Conta&lt;/strong&gt; ainda n√£o existe. Logo, decidi cri√°-la:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Conta
{
    public Conta(string cliente, decimal saldo)
    {
        Cliente = cliente;
        Saldo = saldo;
    }

    public string Cliente { get; private set; }
    public decimal Saldo { get; private set; }

    public decimal Depositar(decimal valor)
    {
        Saldo += valor;
        return Saldo;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aproveitei e tamb√©m criei o m√©todo &lt;strong&gt;Depositar&lt;/strong&gt;. Ele √© simples: recebe um valor e ent√£o adiciona esse valor √† propriedade &lt;strong&gt;Saldo&lt;/strong&gt; da classe.&lt;/p&gt;
&lt;p&gt;Adicionei uma refer√™ncia da classe no projeto de teste e ent√£o o executei. E ent√£o o teste passou !
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8esevtr3rklh3c27nqa.png&#34; alt=&#34;A imagem mostra que o teste foi aprovado ap√≥s a execu√ß√£o com os valores corretos&#34;&gt;&lt;/p&gt;
&lt;p&gt;‚ö†Ô∏è‚ö†Ô∏è Uma forma de garantir que o teste funciona √© fazendo-o quebrar propositalmente. Uma forma de quebrar o teste acima seria alterando o valor esperado para 300. Se o teste e o c√≥digo estiverem certos, o teste n√£o passar√°. Isso √© importante para evitar que o resultado seja um falso-positivo.‚ö†Ô∏è‚ö†Ô∏è&lt;/p&gt;
&lt;p&gt;Ok, o valor adicionado est√° correto, a soma est√° correta. Mas n√£o √© tudo a ser testado nesse m√©todo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma pessoa pode depositar qualquer valor &lt;strong&gt;maior que zero&lt;/strong&gt; na conta;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logo, √© necess√°rio criar um teste para verificar se o meu programa barra o dep√≥sito de um valor negativo como -R$100.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Test]
public void Deposito_QuandoExecutadoComValorNegativo_LancaLancaInvalidOperationException()
{
    //Arrange
    Conta conta = new Conta(&amp;#34;Lucas&amp;#34;, 100);

    //Act
    Func&amp;lt;decimal&amp;gt; acao = () =&amp;gt; conta.Depositar(-100);

    //Assert
    Assert.Throws&amp;lt;InvalidOperationException&amp;gt;(() =&amp;gt; acao());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A grande diferen√ßa est√° nas fases &lt;strong&gt;Act&lt;/strong&gt; e &lt;strong&gt;Assert&lt;/strong&gt;. Assim que o valor -100 for detectado pelo m√©todo, √© necess√°rio que ele lance uma nova exce√ß√£o: &lt;strong&gt;InvalidOperationException&lt;/strong&gt;. Quando ela for lan√ßada, o programa sair√° daquele m√©todo antes de complet√°-lo, fazerndo com que o assert seja um pouco diferente. Para testar se ela realmente foi lan√ßada, primeiro armazenei o m√©todo em um delegate (eu poderia explicar o significado mas tanto a &lt;a href=&#34;https://docs.microsoft.com/pt-br/dotnet/api/system.delegate?view=net-6.0&#34;&gt;Microsoft&lt;/a&gt; quanto o &lt;a href=&#34;http://www.macoratti.net/17/01/net_deleg1.htm&#34;&gt;Macoratti&lt;/a&gt; fizeram um excelente trabalho falando sobre) e ent√£o utilizei o m√©todo Throws da classe Assert. Ele recebe o tipo da exce√ß√£o como generic (&lt;a href=&#34;https://docs.microsoft.com/pt-br/dotnet/standard/generics/&#34;&gt;artigo da Microsoft&lt;/a&gt; e &lt;a href=&#34;http://www.macoratti.net/11/07/net_gen1.htm&#34;&gt;artigo do Macoratti&lt;/a&gt;) e ent√£o consegue verificar se a exce√ß√£o foi lan√ßada.&lt;/p&gt;
&lt;p&gt;Ao rodar o teste na primeira vez, ele n√£o passoupois o m√©todo ainda n√£o lan√ßa a exce√ß√£o. Adicionei apenas 1 if para lan√ßar a exce√ß√£o e ent√£o o teste passou !&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public decimal Depositar(decimal valor)
{
    if (valor &amp;lt;= 0)
    {
        throw new InvalidOperationException(&amp;#34;N√£o √© poss√≠vel depositar valores negativos&amp;#34;);
    }
    Saldo += valor;
    return Saldo
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;‚ö†Ô∏è‚ö†Ô∏èPara quebrar o teste e verificar se ele n√£o d√° um falso positivo, √© poss√≠vel simplesmente alterar o tipo da exce√ß√£o esperada no Assert.‚ö†Ô∏è‚ö†Ô∏è&lt;/p&gt;
&lt;p&gt;Por se tratar de um exemplo, o m√©todo de saque ter√° testes bastante parecidos com o do dep√≥sito, ent√£o √© poss√≠vel verific√°-lo, assim como todo o resto do c√≥digo, nesse reposit√≥rio do GitHub que criei!&lt;/p&gt;
&lt;p&gt;Bem, essa foi uma breve introdu√ß√£o sobre testes de unidade. Na pr√≥xima parte falarei sobre &lt;strong&gt;Mocks&lt;/strong&gt; em um exemplo de uma API Rest e sobre o m√©todo &lt;strong&gt;SetUp&lt;/strong&gt;.Se curtiu, n√£o esque√ßa de compartilhar a postagem!&lt;/p&gt;
&lt;p&gt;At√© a pr√≥xima !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/2YgCmRh9Arduw8LshF/giphy.gif&#34; alt=&#34;Snoopy Dogg acenando em despedida&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
