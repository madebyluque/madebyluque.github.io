<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Words of Lucas Silva</title>
    <link>//localhost:1313/</link>
    <description>Recent content on Words of Lucas Silva</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sun, 12 Jan 2025 11:59:49 -0300</lastBuildDate><atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ: conceitos fundamentais</title>
      <link>//localhost:1313/posts/rabbitmq-concepts/</link>
      <pubDate>Sun, 12 Jan 2025 11:59:49 -0300</pubDate>
      
      <guid>//localhost:1313/posts/rabbitmq-concepts/</guid>
      <description>&lt;p&gt;O RabbitMQ é um dos message brokers mais populares, conhecido por sua flexibilidade e robustez no processamento de mensagens. Este artigo apresenta os principais conceitos do RabbitMQ, incluindo publishers, consumers, exchanges, filas e mecanismos de reconhecimento de mensagens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8nuljmbh6sgc3lot1ec.png&#34; alt=&#34;Fluxo básico de um sistema de mensageria&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;publisherproducer&#34;&gt;Publisher/Producer&lt;/h2&gt;
&lt;p&gt;Uma aplicação &lt;strong&gt;publisher&lt;/strong&gt; é responsável por publicar ou produzir mensagens. Além disso, uma aplicação que publica mensagens também pode consumi-las.&lt;br&gt;
No RabbitMQ, uma mensagem publicada precisa ser roteada para uma fila. Se houver consumidores online conectados à fila, a mensagem será enviada diretamente para eles.&lt;/p&gt;</description>
      <content>&lt;p&gt;O RabbitMQ é um dos message brokers mais populares, conhecido por sua flexibilidade e robustez no processamento de mensagens. Este artigo apresenta os principais conceitos do RabbitMQ, incluindo publishers, consumers, exchanges, filas e mecanismos de reconhecimento de mensagens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8nuljmbh6sgc3lot1ec.png&#34; alt=&#34;Fluxo básico de um sistema de mensageria&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;publisherproducer&#34;&gt;Publisher/Producer&lt;/h2&gt;
&lt;p&gt;Uma aplicação &lt;strong&gt;publisher&lt;/strong&gt; é responsável por publicar ou produzir mensagens. Além disso, uma aplicação que publica mensagens também pode consumi-las.&lt;br&gt;
No RabbitMQ, uma mensagem publicada precisa ser roteada para uma fila. Se houver consumidores online conectados à fila, a mensagem será enviada diretamente para eles.&lt;/p&gt;
&lt;h2 id=&#34;consumer&#34;&gt;Consumer&lt;/h2&gt;
&lt;p&gt;Um &lt;strong&gt;consumer&lt;/strong&gt; é uma aplicação que consome mensagens de uma fila e realiza o reconhecimento (acknowledgement) dessas mensagens. Da mesma forma que um publisher pode consumir mensagens, um consumer também pode publicá-las.&lt;/p&gt;
&lt;h2 id=&#34;exchanges&#34;&gt;Exchanges&lt;/h2&gt;
&lt;p&gt;No RabbitMQ, as mensagens não são enviadas diretamente para as filas. Os publishers enviam mensagens para um &lt;strong&gt;exchange&lt;/strong&gt;, que é responsável por rotear as mensagens para filas específicas, com base nas ligações (&lt;em&gt;bindings&lt;/em&gt;) e chaves de roteamento (&lt;em&gt;routing keys&lt;/em&gt;).&lt;/p&gt;
&lt;h3 id=&#34;tipos-de-exchanges&#34;&gt;Tipos de Exchanges&lt;/h3&gt;
&lt;p&gt;Os exchanges são categorizados de acordo com a forma como realizam o roteamento de mensagens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Direct&lt;/strong&gt;: As mensagens são roteadas para filas cuja ligação (&lt;em&gt;binding&lt;/em&gt;) coincida exatamente com a chave de roteamento (&lt;em&gt;routing key&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf2ox2jyw1kl1tatvn7g.png&#34; alt=&#34;Exemplo de direct exchange&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fanout&lt;/strong&gt;: Roteia mensagens para todas as filas que estejam conectadas a ele.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57caqfmlmb5rq06ppxol.png&#34; alt=&#34;Exemplo de exchange fanout&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Topic&lt;/strong&gt;: Faz um &lt;em&gt;match&lt;/em&gt; com base em padrões (&lt;em&gt;wildcards&lt;/em&gt;) entre a chave de roteamento da mensagem e a chave de ligação das filas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iofrflnzwugjrhy3eksq.png&#34; alt=&#34;Exemplo de exchange baseada em tópicos&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Headers&lt;/strong&gt;: Roteia mensagens com base nos cabeçalhos especificados na mensagem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsjsi550nc2d9ybmugog.png&#34; alt=&#34;Exmplo de exchange baseada em headers&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;queues&#34;&gt;Queues&lt;/h2&gt;
&lt;p&gt;As &lt;strong&gt;filas&lt;/strong&gt; no RabbitMQ são coleções ordenadas de mensagens, e elas seguem uma lógica de &lt;em&gt;First In, First Out&lt;/em&gt; (FIFO) para o enfileiramento e desenfileiramento. Cada mensagem é processada em ordem, garantindo consistência no consumo.&lt;/p&gt;
&lt;h2 id=&#34;acknowledgement&#34;&gt;Acknowledgement&lt;/h2&gt;
&lt;p&gt;O &lt;strong&gt;acknowledgement&lt;/strong&gt; é o mecanismo de confirmação de que uma mensagem foi entregue e/ou processada pelo consumidor. Ele permite que o RabbitMQ saiba quando pode marcar uma mensagem como concluída ou quando deve reenviar a mensagem.&lt;/p&gt;
&lt;h3 id=&#34;delivery-acknowledgement&#34;&gt;Delivery Acknowledgement&lt;/h3&gt;
&lt;p&gt;Existem diferentes formas de reconhecimento no RabbitMQ, que determinam quando uma mensagem é considerada processada com sucesso:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reconhecimento Automático&lt;/strong&gt;: O RabbitMQ considera a mensagem processada assim que ela é entregue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reconhecimento Manual&lt;/strong&gt;: Requer que o consumidor informe explicitamente o status da mensagem. Isso pode ser feito de forma positiva ou negativa:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic.ack&lt;/code&gt;: Usado para indicar que a mensagem foi processada com sucesso.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic.nack&lt;/code&gt;: Usado para indicar que o processamento falhou.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic.reject&lt;/code&gt;: Similar ao &lt;code&gt;basic.nack&lt;/code&gt;, mas com limitações (não suporta múltiplas mensagens ao mesmo tempo).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quando o reconhecimento negativo ocorre, a mensagem pode ser reenfileirada, roteada para um &lt;strong&gt;dead letter exchange&lt;/strong&gt;, ou descartada, dependendo da configuração do campo &lt;code&gt;requeue&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;dead-letter&#34;&gt;Dead Letter&lt;/h2&gt;
&lt;p&gt;Mensagens podem ser marcadas como &lt;strong&gt;dead-letter&lt;/strong&gt; e republicadas caso algum dos seguintes eventos ocorra:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A mensagem é negativamente reconhecida por um consumidor.&lt;/li&gt;
&lt;li&gt;A mensagem expira devido ao TTL (&lt;em&gt;Time To Live&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;A mensagem excede o limite de tamanho configurado.&lt;/li&gt;
&lt;li&gt;A mensagem ultrapassa o limite de tentativas de entrega.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dead letters permitem lidar com falhas de forma estruturada, garantindo maior resiliência no sistema.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Compreender esses conceitos é essencial para projetar sistemas de mensageria eficientes e confiáveis. O RabbitMQ oferece flexibilidade para adaptar-se a diversas arquiteturas, tornando-o uma ferramenta poderosa no ecossistema de aplicações distribuídas.&lt;/p&gt;
&lt;h2 id=&#34;referências&#34;&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/docs&#34;&gt;Documentação do RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Formulários com React Hook Form &#43; Zod</title>
      <link>//localhost:1313/posts/react-hook-form/</link>
      <pubDate>Thu, 07 Nov 2024 11:58:13 -0300</pubDate>
      
      <guid>//localhost:1313/posts/react-hook-form/</guid>
      <description>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;
&lt;p&gt;Quando comecei a programar, precisava escrever bastante código em JavaScript puro para coletar dados de um formulário. De lá para cá, o desenvolvimento web evoluiu tanto que hoje temos bibliotecas que abstraem grande parte desse trabalho, facilitando a gestão dos dados dos formulários.&lt;/p&gt;
&lt;p&gt;Neste artigo, vou mostrar como utilizar o &lt;a href=&#34;https://www.react-hook-form.com/&#34;&gt;React Hook Form&lt;/a&gt; para trabalhar com dados de formulários e &lt;a href=&#34;https://zod.dev/&#34;&gt;zod&lt;/a&gt; para validar esses dados de forma eficiente e organizada.&lt;/p&gt;
&lt;h2 id=&#34;tô-com-pressa-me-dê-o-código-completo&#34;&gt;Tô com pressa, me dê o código completo&lt;/h2&gt;
&lt;p&gt;Tá na mão:&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;
&lt;p&gt;Quando comecei a programar, precisava escrever bastante código em JavaScript puro para coletar dados de um formulário. De lá para cá, o desenvolvimento web evoluiu tanto que hoje temos bibliotecas que abstraem grande parte desse trabalho, facilitando a gestão dos dados dos formulários.&lt;/p&gt;
&lt;p&gt;Neste artigo, vou mostrar como utilizar o &lt;a href=&#34;https://www.react-hook-form.com/&#34;&gt;React Hook Form&lt;/a&gt; para trabalhar com dados de formulários e &lt;a href=&#34;https://zod.dev/&#34;&gt;zod&lt;/a&gt; para validar esses dados de forma eficiente e organizada.&lt;/p&gt;
&lt;h2 id=&#34;tô-com-pressa-me-dê-o-código-completo&#34;&gt;Tô com pressa, me dê o código completo&lt;/h2&gt;
&lt;p&gt;Tá na mão:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Label&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@/components/ui/label&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@/components/ui/input&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@/components/ui/button&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Gamepad&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Gamepad2&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lucide-react&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;useForm&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-hook-form&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zod&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;zodResolver&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@hookform/resolvers/zod&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;toast&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Toaster&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sonner&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signUpForm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nome deve ter ao menos 2 caracteres&amp;#39;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nome deve ter no máximo 50 caracteres&amp;#39;&lt;/span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z.string&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E-mail deve ter no máximo 100 caracteres&amp;#39;&lt;/span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z.string&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Senha deve ter no máximo 100 caracteres&amp;#39;&lt;/span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;confirm&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z.string&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#a6e22e&#34;&gt;refine&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;confirm&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Senhas não conferem!&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SignUpForm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;infer&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signUpForm&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handleSubmit&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;formState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubmitting&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useForm&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;SignUpForm&lt;/span&gt;&amp;gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;resolver&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;zodResolver&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;signUpForm&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleSignup&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SignUpForm&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Promise&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;toast&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conta criada com sucesso!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Toaster&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;richColors&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;min-h-screen lg:grid lg:grid-cols-2 antialiased gap-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden lg:flex h-full justify-center border-r border-foreground/5 bg-foreground text-muted-foreground items-center gap-3 text-lg&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Gamepad2&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gamers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shop&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flex flex-col items-center justify-center gap-6 min-h-screen&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;px-10 w-96 h-full flex flex-col justify-center items-center lg:w-[500px]&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flex items-center gap-2 mb-4 text-2xl font-semibold tracking-tight&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Gamepad&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;Crie&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sua&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;conta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Gamepad&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSubmit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;handleSubmit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;handleSignup&lt;/span&gt;)} &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-4 w-full &amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Nome&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...register&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;} /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-sm text-red-500&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...register&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;} /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-sm text-red-500&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Senha&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...register&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;} /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-sm text-red-500&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;confirm&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Confirme&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;senha&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;confirm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...register&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;} /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;confirm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-sm text-red-500&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;confirm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disabled&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;isSubmitting&lt;/span&gt;}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Criar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;conta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;
&lt;h3 id=&#34;estruturando-o-formulário&#34;&gt;Estruturando o Formulário&lt;/h3&gt;
&lt;p&gt;Primeiro, criei um formulário com quatro campos: nome, e-mail, senha e confirmação de senha. Para facilitar o desenvolvimento da interface, utilizei &lt;code&gt;shadcn&lt;/code&gt;, &lt;code&gt;tailwind&lt;/code&gt; e &lt;code&gt;lucide-react&lt;/code&gt;. O uso de classes CSS pode parecer um pouco detalhado, mas elas ajudam a manter um design consistente.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-4 w-full &amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Nome&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Digite o seu nome&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Digite o seu e-mail&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Senha&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Digite uma senha&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;confirm&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Confirme&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;senha&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;confirm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Digite a senha novamente&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Criar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;conta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Criei 4 campos nesse form: nome, e-mail, password e confirm. Preciso validá-los de alguma forma. Como esse exemplo server para explicar o uso de zod, evitei utilizar as propriedades nativas do HTML (required, maxlength etc).&lt;/p&gt;
&lt;h3 id=&#34;validação-de-dados-com-zod&#34;&gt;Validação de Dados com Zod&lt;/h3&gt;
&lt;p&gt;Para garantir que os dados inseridos nos campos estão corretos, criei um schema de validação com o &lt;code&gt;zod&lt;/code&gt;. O schema define as restrições para cada campo e personaliza as mensagens de erro:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zod&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signUpFormSchema&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nome deve ter ao menos 2 caracteres&amp;#39;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nome deve ter no máximo 50 caracteres&amp;#39;&lt;/span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z.string&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E-mail deve ter no máximo 100 caracteres&amp;#39;&lt;/span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z.string&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Senha deve ter no máximo 100 caracteres&amp;#39;&lt;/span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;confirm&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;z.string&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#a6e22e&#34;&gt;refine&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;confirm&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Senhas não conferem!&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esse schema define os tipos e as validações necessárias para cada campo. O método &lt;code&gt;.refine()&lt;/code&gt; foi utilizado para garantir que as senhas digitadas nos campos &amp;ldquo;password&amp;rdquo; e &amp;ldquo;confirm&amp;rdquo; são iguais.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;refine&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;confirm&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Senhas não conferem!&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;integração-com-react-hook-form-e-zod-resolver&#34;&gt;Integração com React Hook Form e Zod Resolver&lt;/h3&gt;
&lt;p&gt;O &lt;code&gt;React Hook Form&lt;/code&gt; é uma biblioteca de formulários que melhora o desempenho ao reduzir re-renderizações desnecessárias e simplificar a manipulação de dados. Usei o &lt;code&gt;useForm()&lt;/code&gt; para configurar o formulário, passando o schema de validação por meio do &lt;code&gt;zodResolver&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;zodResolver&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@hookform/resolvers/zod&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;useForm&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-hook-form&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SignUpForm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;infer&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signUpFormSchema&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handleSubmit&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;formState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubmitting&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useForm&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;SignUpForm&lt;/span&gt;&amp;gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;resolver&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;zodResolver&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;signUpFormSchema&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As funções e variáveis que utilizei de &lt;code&gt;useForm()&lt;/code&gt; são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;handleSubmit&lt;/code&gt;: lida com o envio do formulário.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register&lt;/code&gt;: vincula campos do formulário ao gerenciamento de dados do React Hook Form.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset&lt;/code&gt;: redefine o formulário.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isSubmitting&lt;/code&gt;: indica se o formulário está sendo enviado.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errors&lt;/code&gt;: armazena erros de validação de cada campo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;função-de-envio-do-formulário&#34;&gt;Função de Envio do Formulário&lt;/h3&gt;
&lt;p&gt;Para simular o envio do formulário, criei a função &lt;code&gt;handleSignup&lt;/code&gt;, que adiciona um tempo de espera para visualizar o estado &lt;code&gt;isSubmitting&lt;/code&gt; e exibe uma mensagem de sucesso com o &lt;code&gt;toast&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleSignup&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SignUpForm&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Promise&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;toast&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conta criada com sucesso!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Depois adicionei a função ao form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSubmit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;handleSubmit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;handleSignup&lt;/span&gt;)} &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-4 w-full&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;E por fim, utilizei o register para denominar qual campo pertence a qual propriedade, e mostrei os erros (caso eles existam):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;space-y-2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Nome&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...register&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;)&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Digite o seu nome&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-sm text-red-500&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O resultado ficou assim:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oipm2sov0dn33pnulzva.png&#34; alt=&#34;Tela de criação de conta feita neste tutorial&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;considerações-finais&#34;&gt;Considerações Finais&lt;/h2&gt;
&lt;p&gt;Nesse texto, mostrei uma forma simples de integrar &lt;code&gt;React Hook Form&lt;/code&gt; e &lt;code&gt;zod&lt;/code&gt; para validação de formulários não controlados. A biblioteca também funciona com componentes controlados, então consulte a &lt;a href=&#34;https://www.react-hook-form.com/get-started/&#34;&gt;documentação&lt;/a&gt; para explorar mais opções.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>EF Core - Explosão Cartesiana</title>
      <link>//localhost:1313/posts/cartesian-explosion/</link>
      <pubDate>Sun, 10 Mar 2024 11:56:22 -0300</pubDate>
      
      <guid>//localhost:1313/posts/cartesian-explosion/</guid>
      <description>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;
&lt;p&gt;Atuei em vários projetos que utilizavam EF Core, e em uma determinada ocasião, encontrei, junto ao meu time, um problema que não fazia muito sentido: uma query simples, com poucos Includes, em tabelas que não possuíam tanto registros (quando comparada a outras tabelas do mesmo banco), estourava timeout. Após análise, o time entendeu que o problema ocorria devido a um fenômeno chamado &lt;strong&gt;Explosão cartesiana&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;o-que-é&#34;&gt;O que é?&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;explosão cartesiana&lt;/strong&gt; ocorre quando, ao realizar queries com joins em propriedades de navegação de entidades no mesmo nível hierárquico em bancos relacionais, o banco de dados retorna um produto vetorial (cross product). Ou seja, cada linha de uma propriedade de navegação é combinada com cada linha da outra propriedade.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;
&lt;p&gt;Atuei em vários projetos que utilizavam EF Core, e em uma determinada ocasião, encontrei, junto ao meu time, um problema que não fazia muito sentido: uma query simples, com poucos Includes, em tabelas que não possuíam tanto registros (quando comparada a outras tabelas do mesmo banco), estourava timeout. Após análise, o time entendeu que o problema ocorria devido a um fenômeno chamado &lt;strong&gt;Explosão cartesiana&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;o-que-é&#34;&gt;O que é?&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;explosão cartesiana&lt;/strong&gt; ocorre quando, ao realizar queries com joins em propriedades de navegação de entidades no mesmo nível hierárquico em bancos relacionais, o banco de dados retorna um produto vetorial (cross product). Ou seja, cada linha de uma propriedade de navegação é combinada com cada linha da outra propriedade.&lt;/p&gt;
&lt;p&gt;Esse comportamento pode gerar um número inesperado de combinações entre os dados, aumentando drasticamente o volume de informações trafegadas entre o banco de dados e a aplicação. &lt;strong&gt;Consequentemente, isso pode afetar o desempenho da aplicação, aumentar os custos de infraestrutura e consumo de recursos, além de tornar a depuração e otimização mais complexa.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;como-resolver&#34;&gt;Como resolver?&lt;/h2&gt;
&lt;p&gt;Uma das melhores formas de lidar com isso é utilizando queries separadas para carregar os dados envolvidos. O EF Core oferece uma solução simples para isso através do método &lt;code&gt;AsSplitQuery()&lt;/code&gt;, que carregará as coleções utilizando múltiplas queries, em vez de uma única query.&lt;/p&gt;
&lt;p&gt;Os exemplos abaixo foram feitos com uma coleção de 100000 blogs armazenados em uma instância de SQL Server 2022, rodando através de um contêiner Docker.&lt;/p&gt;
&lt;h3 id=&#34;exemplo-sem-assplitquery&#34;&gt;Exemplo sem AsSplitQuery&lt;/h3&gt;
&lt;p&gt;Código:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var withoutSplitQuery = context.Blogs
	.Include(b =&amp;gt; b.Posts)
	.Include(b =&amp;gt; b.BlogContributors)
		.ThenInclude(bc =&amp;gt; bc.Contributor)
	.ToList();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nesse exemplo, cada Blog possui uma coleção de Posts e uma de BlogContributors. Como ambas estão no mesmo nível, cada post será combinado com cada contribuinte, o que resulta em um número de linhas maior do que o necessário.&lt;/p&gt;
&lt;p&gt;Query gerada:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELECT [b].[BlogId], [b].[Name], [p].[PostId], [p].[BlogId], [p].[Content], [p].[Title], [t].[BlogId], [t].[ContributorId], [t].[ContributorId0], [t].[Name]
      FROM [Blogs] AS [b]
      LEFT JOIN [Posts] AS [p] ON [b].[BlogId] = [p].[BlogId]
      LEFT JOIN (
          SELECT [b0].[BlogId], [b0].[ContributorId], [c].[ContributorId] AS [ContributorId0], [c].[Name]
          FROM [BlogContributors] AS [b0]
          INNER JOIN [Contributors] AS [c] ON [b0].[ContributorId] = [c].[ContributorId]
      ) AS [t] ON [b].[BlogId] = [t].[BlogId]
      ORDER BY [b].[BlogId], [p].[PostId], [t].[BlogId], [t].[ContributorId]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Resultado na busca de 100000 registros:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*************************************************************************
Tempo de execução sem splitquery: 4526ms
Número de blogs retornados: 100000
*************************************************************************
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;exemplo-com-assplitquery&#34;&gt;Exemplo com AsSplitQuery&lt;/h3&gt;
&lt;p&gt;Código:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var withSplitQuery = context.Blogs
	.Include(b =&amp;gt; b.Posts)
	.Include(b =&amp;gt; b.BlogContributors)
		.ThenInclude(bc =&amp;gt; bc.Contributor)
	.AsSplitQuery()
	.ToList();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Queries geradas:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELECT [b].[BlogId], [b].[Name]
      FROM [Blogs] AS [b]
      ORDER BY [b].[BlogId]

SELECT [p].[PostId], [p].[BlogId], [p].[Content], [p].[Title], [b].[BlogId]
      FROM [Blogs] AS [b]
      INNER JOIN [Posts] AS [p] ON [b].[BlogId] = [p].[BlogId]
      ORDER BY [b].[BlogId]

SELECT [t].[BlogId], [t].[ContributorId], [t].[ContributorId0], [t].[Name], [b].[BlogId]
      FROM [Blogs] AS [b]
      INNER JOIN (
          SELECT [b0].[BlogId], [b0].[ContributorId], [c].[ContributorId] AS [ContributorId0], [c].[Name]
          FROM [BlogContributors] AS [b0]
          INNER JOIN [Contributors] AS [c] ON [b0].[ContributorId] = [c].[ContributorId]
      ) AS [t] ON [b].[BlogId] = [t].[BlogId]
      ORDER BY [b].[BlogId]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Resultado na busca de 100000 registros:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*************************************************************************
Tempo de execução com splitquery: 3664ms
Número de blogs retornados: 100000
*************************************************************************
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Por mais que os exemplos acima tenham utilizado um número relativamente pequeno de dados, os resultados de 10 execuções do teste com dados diferentes foram consistentes: as buscas com queries separadas foram mais rápidas que as buscas com queries únicas. Inclusive, o próprio EF lança um erro ao executar uma query que possa causar uma explosão cartesiana:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Compiling a query which loads related collections for more than onecollection navigation, either via &amp;#39;Include&amp;#39; or through projection, but no &amp;#39;QuerySplittingBehavior&amp;#39; has been configured. By default, Entity Framework will use &amp;#39;QuerySplittingBehavior.SingleQuery&amp;#39;, which can potentially result in slow query performance.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Importante!&lt;/strong&gt;
Há inúmeras variáveis que podem impactar na performance de uma query. Esse texto e os testes acima tratam exclusivamente sobre o problema de &lt;strong&gt;explosão cartesiana.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;configuração-via-dbcontext&#34;&gt;Configuração via DbContext&lt;/h3&gt;
&lt;p&gt;O EF permite a configuração do comportamento como padrão. Para isso, basta configurar o DbContext:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;optionsBuilder
    .UseSqlServer(&amp;#34;ConnectionString&amp;#34;, o =&amp;gt;
    .UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery));
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fontes-e-recursos&#34;&gt;Fontes e recursos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.milanjovanovic.tech/blog/how-to-improve-performance-with-ef-core-query-splitting&#34;&gt;How To Improve Performance With EF Core Query Splitting&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/pt-br/ef/core/querying/single-split-queries&#34;&gt;Consultas únicas vs. consultas divididas&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>TestContainers para testes de integração com .Net</title>
      <link>//localhost:1313/posts/testcontainers/</link>
      <pubDate>Tue, 06 Feb 2024 11:54:32 -0300</pubDate>
      
      <guid>//localhost:1313/posts/testcontainers/</guid>
      <description>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;
&lt;p&gt;Diferente de testes de unidade, os testes de integração permitem validar o comportamento de uma aplicação quando todos os componentes dela são utilizados em conjunto. Isso inclui bancos de dados, serviços de cache, serviços de mensageria etc.&lt;/p&gt;
&lt;p&gt;Na teoria, tudo parece interessante e simples. Mas esses testes podem gerar e alterar um grande volume de dados, então é necessário tomar cuidado com os recursos utilizados. Até porque acidentes acontecem, e talvez, em um descuido, você pode acabar executando um DELETE sem WHERE, levando à exclusão total de uma tabela. 😅&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;
&lt;p&gt;Diferente de testes de unidade, os testes de integração permitem validar o comportamento de uma aplicação quando todos os componentes dela são utilizados em conjunto. Isso inclui bancos de dados, serviços de cache, serviços de mensageria etc.&lt;/p&gt;
&lt;p&gt;Na teoria, tudo parece interessante e simples. Mas esses testes podem gerar e alterar um grande volume de dados, então é necessário tomar cuidado com os recursos utilizados. Até porque acidentes acontecem, e talvez, em um descuido, você pode acabar executando um DELETE sem WHERE, levando à exclusão total de uma tabela. 😅&lt;/p&gt;
&lt;p&gt;Para evitar esse tipo de problemas, é possível criar esses recursos a partir de containers Docker por meio da lib &lt;a href=&#34;https://testcontainers.com/&#34;&gt;TestContainers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Neste tutorial, explicarei os passos para a utilização desses containers em uma API .Net.&lt;/p&gt;
&lt;h2 id=&#34;api&#34;&gt;API&lt;/h2&gt;
&lt;p&gt;O projeto completo pode ser encontrado &lt;a href=&#34;https://github.com/madebyluque/TutorialIntegrationTests&#34;&gt;neste link&lt;/a&gt;. Trata-se de uma API de gerenciamento de tarefas (a famosa &amp;ldquo;To-Do list&amp;rdquo;). Ela consiste de basicamente 3 partes:&lt;/p&gt;
&lt;p&gt;Uma entidade:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace IntegrationTestingDemo.API;

public class Todo
{
    public Todo()
    {
    }

    public Todo(string title, string description)
    {
        Title = title;
        Description = description;
        Id = Guid.NewGuid().ToString().Replace(&amp;#34;-&amp;#34;, &amp;#34;&amp;#34;);
        CreatedAt = DateTime.UtcNow;
        Done = false;
    }

    public string Id { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public bool Done { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime? CompletedAt { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Um service com a lógica da aplicação (visando a simplicidade, algumas operações não foram criadas):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class TodoService(TodoContext context) : ITodoService
{
    private readonly TodoContext _context = context;

    public async Task&amp;lt;string&amp;gt; Create(string title, string description)
    {
        var todo = new Todo(title, description);
        await _context.AddAsync(todo);
        await _context.SaveChangesAsync();
        return todo.Id;
    }

    public async Task&amp;lt;List&amp;lt;Todo&amp;gt;&amp;gt; GetAll()
    {
        return await _context.Todos.OrderBy(x =&amp;gt; x.CreatedAt).ToListAsync();
    }

    public async Task&amp;lt;Todo&amp;gt; GetById(string id)
    {
        return await _context.Todos.FirstOrDefaultAsync(x =&amp;gt; x.Id == id);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;E um controller:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[ApiController]
[Route(&amp;#34;[controller]&amp;#34;)]
public class TodoController(ITodoService todoService) : ControllerBase
{
    private readonly ITodoService _todoService = todoService;

    [HttpPost]
    public async Task&amp;lt;IActionResult&amp;gt; Create([FromBody] CreateTodoModel model)
    {
        var result = await _todoService.Create(model.Title, model.Description);
        return CreatedAtRoute(nameof(GetById), routeValues: new { Id = result }, result);
    }

    [HttpGet]
    public async Task&amp;lt;IActionResult&amp;gt; GetAll()
    {
        var todos = await _todoService.GetAll();
        return Ok(todos);
    }

    [HttpGet(&amp;#34;{id}&amp;#34;, Name = &amp;#34;GetById&amp;#34;)]
    public async Task&amp;lt;IActionResult&amp;gt; GetById(string id)
    {
        var todo = await _todoService.GetById(id);
        return Ok(todo);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;testes&#34;&gt;Testes&lt;/h2&gt;
&lt;p&gt;A configuração de &lt;strong&gt;TestContainer&lt;/strong&gt; é feita na criação da &lt;strong&gt;WebApplicationFactory&lt;/strong&gt; para os testes de integração. Neste tutorial, decidi utilizar PostgreSQL. A criação de um container desse banco de dados pode ser feita da seguinte forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;private readonly PostgreSqlContainer _postgres = new PostgreSqlBuilder().WithUsername(&amp;#34;postgres&amp;#34;).WithPassword(&amp;#34;postgres&amp;#34;).Build();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;É possível alterar o usuário e a senha da forma que desejar. Há, inclusive, a opção de alterar outras configurações no builder, como o nome do db, o host etc.&lt;/p&gt;
&lt;p&gt;Com o container criado, é possível obter a connection string dele da seguinte forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;_postgres.GetConnectionString()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pode ser necessário remover o dbContext da aplicação para adicionar um novo com a connection string do container de teste. Nesse caso, é possível fazê-lo da seguinte forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var context = services.FirstOrDefault(descriptor =&amp;gt; descriptor.ServiceType == typeof(TodoContext));
if (context != null)
{
    services.Remove(context);
    var options = services.Where(r =&amp;gt; (r.ServiceType == typeof(DbContextOptions))
      || (r.ServiceType.IsGenericType &amp;amp;&amp;amp; r.ServiceType.GetGenericTypeDefinition() == typeof(DbContextOptions&amp;lt;&amp;gt;))).ToArray();
    foreach (var option in options)
    {
        services.Remove(option);
    }
}

services.AddDbContext&amp;lt;TodoContext&amp;gt;(options =&amp;gt;
{
    options.UseNpgsql(_postgres.GetConnectionString());
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Por fim, é interessante que sua classe de &lt;strong&gt;WebApplicationFactory&lt;/strong&gt; implemente a interface IAsyncLifetime para que o container criado seja inicializado / parado.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public Task InitializeAsync()
{
    return _postgres.StartAsync();
}

public new Task DisposeAsync()
{
    return _postgres.StopAsync();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Com a configuração feita, já é possível criar testes de integração. No teste abaixo, utilizei o TodoService para criar uma tarefa, e então verifiquei se os dados no banco de dados estavam de acordo com o que deveriam:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Fact]
public async Task Create_ShouldCreateTodoAndReturnItsId()
{
    // Act
    var result = await _todoService.Create(TestTitle, TestDescription);

    // Assert
    var todo = await _dbContext.Todos.FirstOrDefaultAsync(x =&amp;gt; x.Id == result);
    Assert.NotNull(todo);
    Assert.False(todo.Done);
    Assert.Equal(TestTitle, todo.Title);
    Assert.Equal(TestDescription, todo.Description);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(Acesse o &lt;a href=&#34;https://github.com/madebyluque/TutorialIntegrationTests&#34;&gt;repositório&lt;/a&gt; para verificar os demais testes.)&lt;/p&gt;
&lt;p&gt;O exemplo acima testa uma classe simples. Entretanto, poderia testar uma classe mais complexa, como um Handler, que manipula os dados através de diversos objetos. Além disso, o service foi criado para não testar as chamadas diretas ao controller.&lt;/p&gt;
&lt;h2 id=&#34;github-actions&#34;&gt;GitHub actions&lt;/h2&gt;
&lt;p&gt;É possível integrar os testes à pipeline. &lt;a href=&#34;https://www.milanjovanovic.tech/blog/testcontainers-integration-testing-using-docker-in-dotnet&#34;&gt;Essa postagem do Milan Jovanović&lt;/a&gt; mostra como integrá-los a uma Github Action:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;name: Run Tests 🚀

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: &amp;#39;8.0.x&amp;#39;

      - name: Restore
        run: dotnet restore ./IntegrationTestingDemo.sln

      - name: Build
        run: dotnet build ./IntegrationTestingDemo.sln --no-restore

      - name: Test
        run: dotnet test ./IntegrationTestingDemo.sln --no-build
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;Este é o fim do tutorial. Espero que esse texto tenha sido o suficiente para te ajudar a implementar testes de integração com TestContainers na sua aplicação.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Uma forma simples de realizar soft delete em .Net utilizando Entity Framework Core</title>
      <link>//localhost:1313/posts/dotnet-soft-delete/</link>
      <pubDate>Fri, 19 Jan 2024 12:03:34 -0300</pubDate>
      
      <guid>//localhost:1313/posts/dotnet-soft-delete/</guid>
      <description>&lt;p&gt;Ao desenvolver APIs, é comum ter de alterar o comportamento de DELETE para que, em vez de excluir o registro, simplesmente alterar uma propriedade booleana e considerar que aquele recurso não existe caso o valor da propriedade seja &lt;em&gt;false&lt;/em&gt;. Essa técnica é conhecida como &lt;strong&gt;&amp;ldquo;Soft Delete&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Há várias formas de implementar esse comportamento. A forma apresentada neste texto pode ser resumida aos seguintes passos:
1- Adicionar uma propriedade booleana à classe desejada;
2- Sobrescrever o método &lt;strong&gt;SaveChangesAsync&lt;/strong&gt; da classe que estende &lt;strong&gt;DbContext&lt;/strong&gt;;
3- Adicionar um filtro na configuração da entidade para que as entidades &amp;ldquo;inativas&amp;rdquo; não sejam retornadas em queries.&lt;/p&gt;</description>
      <content>&lt;p&gt;Ao desenvolver APIs, é comum ter de alterar o comportamento de DELETE para que, em vez de excluir o registro, simplesmente alterar uma propriedade booleana e considerar que aquele recurso não existe caso o valor da propriedade seja &lt;em&gt;false&lt;/em&gt;. Essa técnica é conhecida como &lt;strong&gt;&amp;ldquo;Soft Delete&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Há várias formas de implementar esse comportamento. A forma apresentada neste texto pode ser resumida aos seguintes passos:
1- Adicionar uma propriedade booleana à classe desejada;
2- Sobrescrever o método &lt;strong&gt;SaveChangesAsync&lt;/strong&gt; da classe que estende &lt;strong&gt;DbContext&lt;/strong&gt;;
3- Adicionar um filtro na configuração da entidade para que as entidades &amp;ldquo;inativas&amp;rdquo; não sejam retornadas em queries.&lt;/p&gt;
&lt;h2 id=&#34;adicionar-propriedade-booleana&#34;&gt;Adicionar propriedade booleana&lt;/h2&gt;
&lt;p&gt;O primeiro passo é autoexplicativo. Crie uma entidade e adicione a propriedade booleana a ela. Caso várias entidades precisem desse comportamento, considere criar uma classe base ou interface que a contenha.&lt;/p&gt;
&lt;h2 id=&#34;sobrescrever-o-método-savechangesasync&#34;&gt;Sobrescrever o método SaveChangesAsync&lt;/h2&gt;
&lt;p&gt;Se você utiliza o EF, é provável que tenha estendido a classe &lt;strong&gt;DbContext&lt;/strong&gt; para criar um contexto próprio. A classe base possui um método chamado &lt;strong&gt;SaveChangesAsync&lt;/strong&gt;, o qual salva as alterações feitas no banco de dados.&lt;br&gt;
A alteração que será realizada no método visa detectar o estado das  entidades rastreadas pelo &lt;a href=&#34;https://learn.microsoft.com/en-us/ef/core/change-tracking/&#34;&gt;ChangeTracker&lt;/a&gt;. Caso alguma tenha sido deletada, será necessário mudar o estado dela para &lt;strong&gt;Unchanged&lt;/strong&gt; (em vez de &lt;strong&gt;Deleted&lt;/strong&gt;), e então alterar a propriedade booleana adicionada no passo anterior.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public override Task&amp;lt;int&amp;gt; SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)
{
    foreach (var entry in ChangeTracker.Entries&amp;lt;T&amp;gt;()) // Onde &amp;#34;T&amp;#34; é o tipo da entidade
    {
        switch (entry.State)
        {
            case EntityState.Deleted:
                entry.State = EntityState.Unchanged;
                entry.Entity.PropriedadeBooleana = false; // Prefira utilizar um método para isso.
                break;
        }
    }
    return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;adicionar-filtro&#34;&gt;Adicionar filtro&lt;/h2&gt;
&lt;p&gt;Com a alteração feita, já é possível alterar todas as queries para que elas deconsiderem entidades às quais o valor da propriedade booleana seja &lt;strong&gt;false&lt;/strong&gt;. Entretanto, dependendo do tamanho da sua aplicação, essa tarefa poderá ser bastante trabalhosa.&lt;/p&gt;
&lt;p&gt;Para evitar a situação descrita acima, o EF fornece uma forma de realizar isso de forma automática através da configuração da entidade. Exemplo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class SuaEntidadeConfiguration: IEntityTypeConfiguration&amp;lt;SuaEntidade&amp;gt;
{
    public void Configure(EntityTypeBuilder&amp;lt;SuaEntidade&amp;gt; builder)
    {
        builder.HasQueryFilter(x =&amp;gt; x.Active);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O código acima faz com que somente as entidades que possuam a propriedade &lt;strong&gt;Active&lt;/strong&gt; como &lt;strong&gt;true&lt;/strong&gt; sejam retornadas em caso de queries.&lt;/p&gt;
&lt;p&gt;Chegamos ao fim do tutorial. Espero que este texto tenha sido o suficiente para a implementação de um comportamento básico de &lt;strong&gt;Soft delete&lt;/strong&gt; na sua aplicação.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Github action para jogos da Unity</title>
      <link>//localhost:1313/posts/unity-github-actions/</link>
      <pubDate>Sun, 16 Jul 2023 12:01:55 -0300</pubDate>
      
      <guid>//localhost:1313/posts/unity-github-actions/</guid>
      <description>&lt;p&gt;Após brincar com desenvolvimento de jogos por alguns anos, decidi levar a sério a carreira de game dev e abri um estúdio de jogos chamado Blue Flower Game Lab.
Estou desenvolvendo meu primeiro projeto sozinho, então tenho tentado automatizar meus processos ao máximo. Foi assim que descobri a &lt;a href=&#34;https://game.ci/&#34;&gt;Game.ci&lt;/a&gt;, uma maneira de automatizar builds de projetos da Unity através do GitHub Actions.&lt;/p&gt;
&lt;h2 id=&#34;configuração&#34;&gt;Configuração&lt;/h2&gt;
&lt;h3 id=&#34;ativação-e-secrets&#34;&gt;Ativação e secrets&lt;/h3&gt;
&lt;p&gt;Crie um arquivo chamado &lt;strong&gt;.github/workflows/activation.yml&lt;/strong&gt; e cole o seguinte conteúdo nele:&lt;/p&gt;</description>
      <content>&lt;p&gt;Após brincar com desenvolvimento de jogos por alguns anos, decidi levar a sério a carreira de game dev e abri um estúdio de jogos chamado Blue Flower Game Lab.
Estou desenvolvendo meu primeiro projeto sozinho, então tenho tentado automatizar meus processos ao máximo. Foi assim que descobri a &lt;a href=&#34;https://game.ci/&#34;&gt;Game.ci&lt;/a&gt;, uma maneira de automatizar builds de projetos da Unity através do GitHub Actions.&lt;/p&gt;
&lt;h2 id=&#34;configuração&#34;&gt;Configuração&lt;/h2&gt;
&lt;h3 id=&#34;ativação-e-secrets&#34;&gt;Ativação e secrets&lt;/h3&gt;
&lt;p&gt;Crie um arquivo chamado &lt;strong&gt;.github/workflows/activation.yml&lt;/strong&gt; e cole o seguinte conteúdo nele:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;name: Acquire activation file
on:
  workflow_dispatch: {}
jobs:
  activation:
    name: Request manual activation file 🔑
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Execute essa ação. O resultado dela será um arquivo de ativação manual. Depois disso, pegue o arquivo e faça o upload dele em &lt;a href=&#34;https://license.unity3d.com/manual&#34;&gt;license.unity3d.com&lt;/a&gt; para obter um arquivo de licença.
Com o arquivo de licença em mãos, será necessário criar os seguintes segredos no repositório do seu jogo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNITY_LICENSE: conteúdo obtido no arquivo de licença;&lt;/li&gt;
&lt;li&gt;UNITY_EMAIL: e-mail de login na Unity;&lt;/li&gt;
&lt;li&gt;UNITY_PASSWORD: senha para login na Unity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; a senha e o e-mail não são solicitados nem armazenados pela game.ci. São necessárias apenas para reativação da licença durante o processo de build.&lt;/p&gt;
&lt;h3 id=&#34;build&#34;&gt;Build&lt;/h3&gt;
&lt;p&gt;Após obter a licença e configurar os secrets, crie um novo arquivo de pipeline com o seguinte conteúdo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;name: Build

on:
  push:
    branches:
      - main
      
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          # - StandaloneWindows # Build a Windows standalone.
          # - StandaloneWindows64 # Build a Windows 64-bit standalone.
          # - StandaloneLinux64 # Build a Linux 64-bit standalone.
          # - iOS # Build an iOS player.
          # - Android # Build an Android .apk standalone app.
          # - WebGL # WebGL.
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ hashFiles(&amp;#39;Assets/**&amp;#39;, &amp;#39;Packages/**&amp;#39;, &amp;#39;ProjectSettings/**&amp;#39;) }}
          restore-keys: |
            Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build

      # Discord notification
      - name: Discord Notifier
        uses: madebyluque/action-discord-notifier@v1.1.1
        with:
          webhook: Webhook do canal do discord
          message-title: Título da mensagem do discord
          message-description: Descrição da mensagem
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Com o arquivo criado, você precisará apenas selecionar as plataformas alvo. Para isso, remova o símbolo &amp;ldquo;#&amp;rdquo; das plataformas desejadas na seção &lt;strong&gt;targetPlatform&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;O último passo da pipeline envia uma notificação a um canal do Discord. Como a execução dela pode passar de 10 minutos, optei por ser avisado da conclusão dela em vez de ficar esperando. Para isso, fiz o fork de uma ação no github e modifiquei algumas informações para poder personalizar o título e a descrição da mensagem. Esse passo é opcional, então fique à vontade para removê-lo.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Recursos e dicas para o desenvolvimento do seu primeiro game</title>
      <link>//localhost:1313/posts/gamedev/</link>
      <pubDate>Mon, 20 Feb 2023 11:51:47 -0300</pubDate>
      
      <guid>//localhost:1313/posts/gamedev/</guid>
      <description>&lt;p&gt;Fotos de Foto de &lt;a href=&#34;https://unsplash.com/es/@sigmund?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Sigmund&lt;/a&gt; e &lt;a href=&#34;https://unsplash.com/@dylu?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Jacek Dylag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bem, é muito provável que você, assim como eu, sempre sonhou em desenvolver seus próprios jogos. Assim que mudei de carreira e comecei a programar, decidi que tiraria esse sonho do papel e o tornaria realidade. Ainda não consegui terminar meu game, mas as coisas estão caminhando bem. Trarei aqui algumas dicas para que você possa fazer o mesmo.&lt;/p&gt;
&lt;h2 id=&#34;antes-de-mais-nada-é-um-processo-longo-e-trabalhoso&#34;&gt;Antes de mais nada: é um processo longo e trabalhoso&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/JWybLzXs7Hn0JKhSji/giphy.gif&#34; alt=&#34;Muito trabalhoso!&#34; title=&#34;Muito trabalhoso!&#34;&gt;&lt;/p&gt;</description>
      <content>&lt;p&gt;Fotos de Foto de &lt;a href=&#34;https://unsplash.com/es/@sigmund?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Sigmund&lt;/a&gt; e &lt;a href=&#34;https://unsplash.com/@dylu?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Jacek Dylag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bem, é muito provável que você, assim como eu, sempre sonhou em desenvolver seus próprios jogos. Assim que mudei de carreira e comecei a programar, decidi que tiraria esse sonho do papel e o tornaria realidade. Ainda não consegui terminar meu game, mas as coisas estão caminhando bem. Trarei aqui algumas dicas para que você possa fazer o mesmo.&lt;/p&gt;
&lt;h2 id=&#34;antes-de-mais-nada-é-um-processo-longo-e-trabalhoso&#34;&gt;Antes de mais nada: é um processo longo e trabalhoso&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/JWybLzXs7Hn0JKhSji/giphy.gif&#34; alt=&#34;Muito trabalhoso!&#34; title=&#34;Muito trabalhoso!&#34;&gt;&lt;/p&gt;
&lt;p&gt;Se você está começando do zero, saiba que criar um jogo é um processo trabalhoso. Sério. Você pode agilizá-lo com algumas das dicas deste texto, mas no geral, você vai passar alguns meses/anos trabalhando na arte, no código, no design de níveis, no som&amp;hellip;
Inclusive, saiba que todo projeto de vida tem um custo muito alto: seu tempo. Entretanto, mesmo que você não se torne o novo &lt;a href=&#34;https://pt.wikipedia.org/wiki/Eric_Barone&#34;&gt;Eric Barone&lt;/a&gt;, o conhecimento adquirido ao &lt;strong&gt;criar um projeto seu&lt;/strong&gt;, é extremamente valioso.&lt;/p&gt;
&lt;h2 id=&#34;game-engine&#34;&gt;Game Engine&lt;/h2&gt;
&lt;p&gt;Se você estiver pensando em realizar o seu primeiro projeto, não comece por criar uma game engine. Há milhares de engines gratuitas por aí, então &lt;strong&gt;não reinvente a roda&lt;/strong&gt;.
&lt;img src=&#34;https://media.giphy.com/media/3o6gE9BYreSsQyOD9C/giphy.gif&#34; alt=&#34;Não reinvente a roda&#34; title=&#34;Não reinvente a roda&#34;&gt;
Uma game engine é um software voltado ao desenvolvimento de jogos. Será nela que você criará seus níveis, scripts, mecânicas do jogo etc. A escolha de uma boa game engine basicamente ditará se o seu projeto será terminado ou não.
Há alguns pontos a serem considerados, como facilidade para gerar as versões finais (builds) do projeto, facilidade para criação de scripts, facilidade para trabalhar os objetos etc.
Pensando nisso, a minha escolha pessoal é a &lt;a href=&#34;https://unity.com/pt&#34;&gt;Unity&lt;/a&gt;. É possível criar jogos 2D, 3D, jogos para realidade virtual e outros. Além disso, ela simplifica o processo de &amp;ldquo;buildar&amp;rdquo; seu jogo para celulares, pcs, consoles etc.
A linguagem de programação da Unity é o C#, uma linguagem vastamente consolidada no mercado. A documentação dela é completa e há tutoriais incríveis sobre ela na internet. Entretanto, &lt;strong&gt;há um ponto de atenção&lt;/strong&gt;: por mais que a documentação da linguagem seja incrível, a documentação da unity não é muito boa, e muitas vezes você precisará recorrer a canais do Youtube (veja nas referências).
Eu tentei outras das engines que recomendam na internet mas não consegui avançar muito com elas. Caso queira saber mais, os links são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gamemaker.io/pt-BR/download&#34;&gt;GameMaker&lt;/a&gt;: você não precisa saber programar para conseguir fazer um jogo usando ela;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godotengine.org/&#34;&gt;Godot&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arte-visual&#34;&gt;Arte visual&lt;/h2&gt;
&lt;p&gt;Essa tem sido a parte mais difícil nos meus projetos. Eu até consigo desenhar, mas criar artes que encham as pessoas de sensações não é uma tarefa fácil. E não se engane: muitas pessoas abandonarão seu game se a arte não interessá-las.
Isso não significa que seu game precisa ser extremamente realista. Ele só precisa ser agradável aos olhos, e isso é bastante subjetivo (logo, não tente agradar todo mundo).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhqos981uvtyvbw997i6.png&#34; alt=&#34;Planet of Lana&#34; title=&#34;Planet of Lana&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rre2f17oof9013frf2bc.png&#34; alt=&#34;Child of light&#34; title=&#34;Child of light&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evu1qasdw2z1raqgtzhx.png&#34; alt=&#34;Will it Snail&#34; title=&#34;Will it Snail&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csnqjps8jbeunnhun0bf.png&#34; alt=&#34;Stardew Valley&#34; title=&#34;Stardew Valley&#34;&gt;&lt;/p&gt;
&lt;p&gt;Você pode usar uma ou várias ferramentas para criar sua arte. Aqui estão algumas das minhas favoritas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://krita.org/&#34;&gt;Krita&lt;/a&gt;: desenho e pintura digital;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.piskelapp.com/&#34;&gt;Piskel&lt;/a&gt;: pixel art;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.blender.org/&#34;&gt;Blender&lt;/a&gt;: arte e modelagem 3D;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mapeditor.org/&#34;&gt;Tiled&lt;/a&gt;: criação de tilemaps e editor de níveis;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pureref.com/&#34;&gt;PureRef&lt;/a&gt;: referência de imagens.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entretanto, assim como com as Game Engines, você não precisa criar tudo do zero. Há sites que vendem assets ou até mesmo disponibilizam eles gratuitamente. O canal &lt;a href=&#34;https://www.youtube.com/@DavidWehleGames&#34;&gt;Game Dev Unlocked&lt;/a&gt; fala sobre como assets gratuitos foram importantes na criação do game &lt;a href=&#34;https://store.steampowered.com/app/555150/The_First_Tree/&#34;&gt;The First Tree&lt;/a&gt;. Você pode encontrar esses assets no &lt;a href=&#34;https://itch.io/game-assets&#34;&gt;itch&lt;/a&gt;, na &lt;a href=&#34;https://assetstore.unity.com/&#34;&gt;Unity Asset Store&lt;/a&gt; ou em outros sites.&lt;/p&gt;
&lt;h2 id=&#34;som&#34;&gt;Som&lt;/h2&gt;
&lt;p&gt;O som pode fazer seu jogo ser incrível ou extremamente chato
&amp;ndash; inclusive, não consigo jogar Splatoon devido às músicas apresentadas nos trailers.
Gosto bastante do &lt;a href=&#34;https://lmms.io/download#windows&#34;&gt;LMMS&lt;/a&gt; para criação de músicas. Entretanto, no meu projeto atual, decidi partir para algo mais manual, então comprei uma interface de áudio (&lt;a href=&#34;https://pt.aliexpress.com/item/1005003093878428.html&#34;&gt;Teyun Q-22&lt;/a&gt;) e estou utilizando o &lt;a href=&#34;https://www.audacityteam.org/download/&#34;&gt;Audacity&lt;/a&gt; e o Guitar Rig 5 para gravar músicas diretamente com a guitarra e o violão.
Você precisará entender alguns conceitos antes de compor para seu game. Não basta apenas pegar um instrumento e sair tocando notas de forma desgovernada. A palestra do &lt;a href=&#34;https://www.youtube.com/watch?v=ELQoHDrv2hg&#34;&gt;Leo Borges no GDTK 2021&lt;/a&gt; me ajudou a entender as necessidades sonoras do meu game, e recomendo que você a assista.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4st7kmeh6q5ndjwpmwb1.png&#34; alt=&#34;Jacek Dylag&#34; title=&#34;Jacek Dylag&#34;&gt;&lt;/p&gt;
&lt;p&gt;Há outros tipos de áudio em jogos. Sons de passos, de portas abrindo (quem lembra das portas de Resident Evil do PS1 se abrindo?). Costumo usar o site &lt;a href=&#34;https://opengameart.org/&#34;&gt;OpenGameArt&lt;/a&gt; para buscar esse tipo de áudio.&lt;/p&gt;
&lt;h2 id=&#34;fim&#34;&gt;Fim?&lt;/h2&gt;
&lt;p&gt;Na verdade, &lt;strong&gt;espero que esse seja um início. Pelo menos para o seu projeto&lt;/strong&gt;. Senta na cadeira, escolhe a engine, baixa uns assets e começa o teu game. Sério. Não espere mais tempo para isso.
Se, assim como eu, você tiver dúvidas se vale ou não a pena criar um jogo, minha resposta é: &lt;strong&gt;sempre vale&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Se precisar de uma ajuda, uma mentoria, ou apenas quiser falar sobre game dev, siga-me no &lt;a href=&#34;https://twitter.com/cephalopodluke&#34;&gt;twitter&lt;/a&gt; ou envie um e-mail para &lt;a href=&#34;mailto:lucas@blueflowergamelab.com&#34;&gt;lucas@blueflowergamelab.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enfim, espero que este texto tenha te ajudado. Vou deixar uns links na sessão de &lt;strong&gt;recursos&lt;/strong&gt; para você conseguir seguir adiante com seu projeto.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2 id=&#34;recursos&#34;&gt;Recursos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@Blackthornprod&#34;&gt;BlackThornProd - Youtube&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@Brackeys&#34;&gt;Brackeys - Youtube&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@CodeMonkeyUnity&#34;&gt;CodeMonkey - Youtube&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@gamedevtoolkit&#34;&gt;Gamedev Toolkit - Youtube&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opengameart.org/&#34;&gt;OpenGameArt&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jqWJsacaEi4&#34;&gt;Seu jogo é MUITO grande! Como criar com limitações&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Automatizando a criação de requisições no JMeter utilizando Postman</title>
      <link>//localhost:1313/posts/jmeter/</link>
      <pubDate>Mon, 18 Jul 2022 11:49:46 -0300</pubDate>
      
      <guid>//localhost:1313/posts/jmeter/</guid>
      <description>&lt;p&gt;Faz um tempo que não escrevo por aqui, mas hoje, enquanto estudava para resolver um problema do trampo, me deparei com uma técnica que facilitou muito a forma de criar requisições no JMeter, então decidi compartilhá-la.&lt;/p&gt;
&lt;p&gt;Antes de mais nada, quero agradecer aos meus amigos &lt;a href=&#34;https://twitter.com/ojuninrocha&#34;&gt;Jurno&lt;/a&gt; e &lt;a href=&#34;https://github.com/poferrari&#34;&gt;João&lt;/a&gt;, que me guiaram na busca pela solução.&lt;/p&gt;
&lt;p&gt;Sem mais delongas, bora pro problema.&lt;/p&gt;
&lt;h2 id=&#34;o-problema&#34;&gt;O problema&lt;/h2&gt;
&lt;p&gt;Imagine que em um determinado momento, você e seu time precisarão realizar um teste de carga na aplicação que vocês desenvolvem. Entretanto, vocês possuem pouco ou nenhum conhecimento com a ferramenta JMeter, uma das mais utilizadas para esse tipo de tarefa.
Uma das possíveis soluções é gastar um bom tempo lendo a documentação para aprender a criar as requisições uma a uma. Inclusive, essa teria sido a minha decisão, não fosse pelos conselhos dos amigos citados acima.&lt;/p&gt;</description>
      <content>&lt;p&gt;Faz um tempo que não escrevo por aqui, mas hoje, enquanto estudava para resolver um problema do trampo, me deparei com uma técnica que facilitou muito a forma de criar requisições no JMeter, então decidi compartilhá-la.&lt;/p&gt;
&lt;p&gt;Antes de mais nada, quero agradecer aos meus amigos &lt;a href=&#34;https://twitter.com/ojuninrocha&#34;&gt;Jurno&lt;/a&gt; e &lt;a href=&#34;https://github.com/poferrari&#34;&gt;João&lt;/a&gt;, que me guiaram na busca pela solução.&lt;/p&gt;
&lt;p&gt;Sem mais delongas, bora pro problema.&lt;/p&gt;
&lt;h2 id=&#34;o-problema&#34;&gt;O problema&lt;/h2&gt;
&lt;p&gt;Imagine que em um determinado momento, você e seu time precisarão realizar um teste de carga na aplicação que vocês desenvolvem. Entretanto, vocês possuem pouco ou nenhum conhecimento com a ferramenta JMeter, uma das mais utilizadas para esse tipo de tarefa.
Uma das possíveis soluções é gastar um bom tempo lendo a documentação para aprender a criar as requisições uma a uma. Inclusive, essa teria sido a minha decisão, não fosse pelos conselhos dos amigos citados acima.&lt;/p&gt;
&lt;h2 id=&#34;a-solução&#34;&gt;A solução&lt;/h2&gt;
&lt;p&gt;É possível adicionar um elemento ao plano de teste do JMeter chamado &lt;a href=&#34;https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html&#34;&gt;&lt;strong&gt;HTTP(S) Test Script Recorder&lt;/strong&gt;&lt;/a&gt;. Ele é responsável por gravar requisições http e transformá-las em uma HTTP Request (sampler).
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gkliswkgkqjfr4upy0i.png&#34; alt=&#34;Imagem da UI do JMeter mostrando o HTTPS Test Script Recorder&#34;&gt;
Com esse elemento adicionado, basta ajustar as configurações de proxy do Postman (ou qualquer outro sistema que você utiliza) para o endereço do Test Script Recorder (localhost:8888 por default), rodar o elemento e então realizar uma requisição no sistema a ser testado.
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcnltqf07ag0br92nhlv.png&#34; alt=&#34;Configurações de proxy do postman&#34;&gt;
Fiz uma requisição de exemplo na &lt;a href=&#34;https://pokeapi.co/api/v2/pokemon/ditto&#34;&gt;PokéAPI&lt;/a&gt;, e eis a requisição montada automaticamente no JMeter:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29p2sjk2d7iewegegped.png&#34; alt=&#34;Interface do JMeter mostrando a requisição montada automaticamente&#34;&gt;&lt;/p&gt;
&lt;p&gt;É possível que seja necessário realizar algumas alterações na requisição gerada, mas creio que o procedimento descrito acima seja um excelente ponto de entrada para requisições mais elaboradas.&lt;/p&gt;
&lt;p&gt;Bem, caso haja alguma dúvida sobre o texto ou alguma sugestão de melhoria, peço que envie um comentário 😎.
Até a próxima!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>.Net - Scoped, transient e singleton</title>
      <link>//localhost:1313/posts/lifecycles/</link>
      <pubDate>Tue, 19 Apr 2022 11:47:35 -0300</pubDate>
      
      <guid>//localhost:1313/posts/lifecycles/</guid>
      <description>&lt;p&gt;Vejo bastante gente com dificuldade em entender a diferença entre os principais tipos de lifecycle quando falamos sobre injeção de dependência em .net. Criei um exemplo no &lt;a href=&#34;https://github.com/lukelima/LifecycleExample.&#34;&gt;GitHub&lt;/a&gt; e vou falar sobre ele.&lt;/p&gt;
&lt;p&gt;Basicamente criei 3 serviços bastante simples e parecidos (apenas para fins didáticos) e os injetei utilizando AddSingleton, AddScoped e AddTransient.
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8noxoqf10ivwjukmajcf.png&#34; alt=&#34;Injeção dos serviços no arquivo Program.cs&#34;&gt;&lt;/p&gt;
&lt;p&gt;Esses serviços só possuem uma propriedade, o Id, que é criada no momento da instanciação.
Criei um controller e injetei os serviços por construtor.&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtxlecy6yja6fdi733us.png&#34; alt=&#34;Injeção dos serviços no construtor&#34;&gt;&lt;/p&gt;</description>
      <content>&lt;p&gt;Vejo bastante gente com dificuldade em entender a diferença entre os principais tipos de lifecycle quando falamos sobre injeção de dependência em .net. Criei um exemplo no &lt;a href=&#34;https://github.com/lukelima/LifecycleExample.&#34;&gt;GitHub&lt;/a&gt; e vou falar sobre ele.&lt;/p&gt;
&lt;p&gt;Basicamente criei 3 serviços bastante simples e parecidos (apenas para fins didáticos) e os injetei utilizando AddSingleton, AddScoped e AddTransient.
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8noxoqf10ivwjukmajcf.png&#34; alt=&#34;Injeção dos serviços no arquivo Program.cs&#34;&gt;&lt;/p&gt;
&lt;p&gt;Esses serviços só possuem uma propriedade, o Id, que é criada no momento da instanciação.
Criei um controller e injetei os serviços por construtor.&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtxlecy6yja6fdi733us.png&#34; alt=&#34;Injeção dos serviços no construtor&#34;&gt;&lt;/p&gt;
&lt;p&gt;Também injetei uma instância do serviço em cada método.
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbzeyh86fimx3xji9aeu.png&#34; alt=&#34;Injeção dos serviços em cada método&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;singleton&#34;&gt;Singleton&lt;/h2&gt;
&lt;p&gt;O serviço é criado &lt;strong&gt;uma única vez&lt;/strong&gt; e a mesma instância é passada para todas as chamadas dele. Veja que o id, criado no momento da instanciação, foi o mesmo (e continua sendo o mesmo independente da requisição):
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djf0pqcgxgmr0k59iem2.png&#34; alt=&#34;Imagem mostra que uma única instância foi criada&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;scoped&#34;&gt;Scoped&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Uma única instância é criada por requisição&lt;/strong&gt;. Então se o serviço for chamado em vários lugares em uma única requisição, a mesma instância será passada. Outras instâncias serão criadas para as próximas requisições.&lt;/p&gt;
&lt;p&gt;Mesma requisição:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxkot9z4wtnarvh9hvxt.png&#34; alt=&#34;Imagem mostra que uma única instância foi criada&#34;&gt;&lt;/p&gt;
&lt;p&gt;Requisição diferente:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg603oilzwhz3luzoo6h.png&#34; alt=&#34;Imagem mostra que uma nova instância foi criada para uma segunda requisição&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;transient&#34;&gt;Transient&lt;/h2&gt;
&lt;p&gt;Ele é o mais custoso, pois se o serviço for chamado em diversas classes, &lt;strong&gt;cada uma delas terá uma instância diferente&lt;/strong&gt;:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ynbb4lr6b78cbg1zx5t.png&#34; alt=&#34;Imagem mostra que uma instância foi criada para cada chamada do serviço&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Testes de unidade com NUnit para aplicações C#</title>
      <link>//localhost:1313/posts/dotnet-unit-tests/</link>
      <pubDate>Fri, 18 Mar 2022 11:45:29 -0300</pubDate>
      
      <guid>//localhost:1313/posts/dotnet-unit-tests/</guid>
      <description>&lt;p&gt;Basicamente, testes automatizados são uma forma de automatizar o processo de revisão e validação de um software através de uma ferramenta programável. Esse processo, que antes podia ser extremamente trabalhoso e demorado, pode ser feito em minutos &amp;ndash; ou até mesmo segundos, dependendo dos tipos e da quantidade de testes existentes na sua aplicação.&lt;/p&gt;
&lt;p&gt;Mike Cohn criou o conceito de pirâmide de testes no livro &amp;ldquo;Succeeding with Agile&amp;rdquo;. É basicamente uma forma de te fazer pensar nas várias camadas de testes e em como elas devem estar presentes:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ey9qc5peuj6d1jwuby.png&#34; alt=&#34;Pirâmide de testes cunhada po Cohn. A base dela é composta por testes de unidade, seguida por testes de serviços e por fim testes de ui. Quanto mais baixo o nível do teste na pirâmide, mais desacoplado e mais rápido ele é&#34;&gt;
Quanto mais baixo o nível do teste na pirâmide, mais desacoplado e mais rápido ele é, além de mais numeroso.&lt;/p&gt;</description>
      <content>&lt;p&gt;Basicamente, testes automatizados são uma forma de automatizar o processo de revisão e validação de um software através de uma ferramenta programável. Esse processo, que antes podia ser extremamente trabalhoso e demorado, pode ser feito em minutos &amp;ndash; ou até mesmo segundos, dependendo dos tipos e da quantidade de testes existentes na sua aplicação.&lt;/p&gt;
&lt;p&gt;Mike Cohn criou o conceito de pirâmide de testes no livro &amp;ldquo;Succeeding with Agile&amp;rdquo;. É basicamente uma forma de te fazer pensar nas várias camadas de testes e em como elas devem estar presentes:
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3ey9qc5peuj6d1jwuby.png&#34; alt=&#34;Pirâmide de testes cunhada po Cohn. A base dela é composta por testes de unidade, seguida por testes de serviços e por fim testes de ui. Quanto mais baixo o nível do teste na pirâmide, mais desacoplado e mais rápido ele é&#34;&gt;
Quanto mais baixo o nível do teste na pirâmide, mais desacoplado e mais rápido ele é, além de mais numeroso.&lt;/p&gt;
&lt;p&gt;Há inúmeros tipos de teste &amp;ndash; muitos dos quais eu mesmo desconheço a fundo &amp;ndash; mas abordarei apenas os testes de unidade. Eles possuem esse nome pois tendem as menores unidades de classes e métodos de forma isolada do resto da aplicação: sem acoplamento, nem nada. Apenas verificações para garantir que eles funcionem conforme o esperado, que as variáveis tenham os valores esperados etc.&lt;/p&gt;
&lt;p&gt;Uma disciplina importante para criar testes é aquela chamada de TDD - Desenvolvimento orientado a testes. Nela, primeiro se escreve os testes, depois o código para que o teste funcione, depois o código é refatorado para que se torne a melhor versão que puder ser (esse último passo costuma ser bastante ignorado, gerando débitos técnicos).&lt;/p&gt;
&lt;p&gt;Ok, mas por que começar pelos testes e não pelo código ? Porque para criar uma solução, é necessário saber o que precisa ser criado. É necessário saber de antemão o que uma classe deve fazer, o que um método deve fazer, o valor que uma variável deve ter etc. Sem isso em mente, é muito fácil assumir que um resultado qualquer é o correto. E é assim que nascem os bugs 🐞!&lt;/p&gt;
&lt;p&gt;Sem mais delongas, bora pro código.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/KGdKKipVBu9vO5hKkb/giphy.gif&#34; alt=&#34;Killjoy do jogo Valorant, em frente a um computador, arrumando os óculos no próprio rosto&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;mãos-à-obra&#34;&gt;Mãos à obra&lt;/h2&gt;
&lt;p&gt;Criei uma aplicação console para exemplificar. Nela, criarei uma classe &amp;ldquo;Conta&amp;rdquo; com as seguintes especificações:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma pessoa pode depositar qualquer valor maior que zero na conta;&lt;/li&gt;
&lt;li&gt;Uma pessoa pode sacar valores maiores que 0 e menores ou iguais ao saldo total;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adicionei um projeto NUnit com o Visual Studio. Nele, criei uma classe chamada &lt;strong&gt;ContaTests&lt;/strong&gt;, conforme abaixo. O atributo &lt;strong&gt;[TestFixture]&lt;/strong&gt; indica que uma classe possui testes.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[TestFixture]
public class ContaTests
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;E então parti para o teste do primeiro método. Para que um método seja detectado como teste, é necessário adicionar o atributo &lt;strong&gt;[Test]&lt;/strong&gt; acima dele. Quanto ao nome do método de teste, fiz baseando-me em algumas recomendações que podem ser encontradas &lt;a href=&#34;https://docs.microsoft.com/pt-br/dotnet/core/testing/unit-testing-best-practices&#34;&gt;neste link.&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Test]
public void Depositar_RetornaSaldoMaisValorDepositado()
{
    // Arrange 
    
    // Act
    
    // Assert
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Gosto de deixar os 3 comentários em todos os testes que crio para separar bem as fases dele. Essas fases formam o padrão AAA, muito utilizado na indústria, e correspondem a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange: fase na qual é necessário preparar teste preparando as variáveis, criando instâncias de objeto necessárias etc.;&lt;/li&gt;
&lt;li&gt;Act: fase na qual o método a ser testado é executado;&lt;/li&gt;
&lt;li&gt;Assert: fase na qual é feita a verificação de que o resultado obtido está de acordo com o esperado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Na primeira fase, criei apenas uma instância da classe &lt;strong&gt;Conta&lt;/strong&gt;, que ainda não existe, e então criei uma variável com o valor que espero obter como resultado do teste.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Arrange 
Conta conta = new Conta(&amp;#34;Lucas&amp;#34;, 100);
decimal saldoEsperado = 200;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Na fase de ação, executei o método e armazenei o resultado em uma variável:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Act
var resultado = conta.Depositar(100);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;E por fim, fiz a verificação de que o resultado era igual ao saldoEsperado. Para isso, usei a classe Assert do NUnit. Ela contém vários métodos estáticos para testar inúmeras situações, como listas, igualdades, nulos etc.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Assert
Assert.AreEqual(saldoEsperado, resultado);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O teste final ficou da seguinte forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Test]
public void Depositar_RetornaSaldoMaisValorDepositado()
{
    // Arrange 
    Conta conta = new Conta(&amp;#34;Lucas&amp;#34;, 100);
    decimal saldoEsperado = 200;

    Act
    var resultado = conta.Depositar(100);

    Assert
    Assert.AreEqual(saldoEsperado, resultado);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O teste não compilará no primeiro momento pois a classe &lt;strong&gt;Conta&lt;/strong&gt; ainda não existe. Logo, decidi criá-la:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Conta
{
    public Conta(string cliente, decimal saldo)
    {
        Cliente = cliente;
        Saldo = saldo;
    }

    public string Cliente { get; private set; }
    public decimal Saldo { get; private set; }

    public decimal Depositar(decimal valor)
    {
        Saldo += valor;
        return Saldo;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aproveitei e também criei o método &lt;strong&gt;Depositar&lt;/strong&gt;. Ele é simples: recebe um valor e então adiciona esse valor à propriedade &lt;strong&gt;Saldo&lt;/strong&gt; da classe.&lt;/p&gt;
&lt;p&gt;Adicionei uma referência da classe no projeto de teste e então o executei. E então o teste passou !
&lt;img src=&#34;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8esevtr3rklh3c27nqa.png&#34; alt=&#34;A imagem mostra que o teste foi aprovado após a execução com os valores corretos&#34;&gt;&lt;/p&gt;
&lt;p&gt;⚠️⚠️ Uma forma de garantir que o teste funciona é fazendo-o quebrar propositalmente. Uma forma de quebrar o teste acima seria alterando o valor esperado para 300. Se o teste e o código estiverem certos, o teste não passará. Isso é importante para evitar que o resultado seja um falso-positivo.⚠️⚠️&lt;/p&gt;
&lt;p&gt;Ok, o valor adicionado está correto, a soma está correta. Mas não é tudo a ser testado nesse método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma pessoa pode depositar qualquer valor &lt;strong&gt;maior que zero&lt;/strong&gt; na conta;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logo, é necessário criar um teste para verificar se o meu programa barra o depósito de um valor negativo como -R$100.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Test]
public void Deposito_QuandoExecutadoComValorNegativo_LancaLancaInvalidOperationException()
{
    //Arrange
    Conta conta = new Conta(&amp;#34;Lucas&amp;#34;, 100);

    //Act
    Func&amp;lt;decimal&amp;gt; acao = () =&amp;gt; conta.Depositar(-100);

    //Assert
    Assert.Throws&amp;lt;InvalidOperationException&amp;gt;(() =&amp;gt; acao());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A grande diferença está nas fases &lt;strong&gt;Act&lt;/strong&gt; e &lt;strong&gt;Assert&lt;/strong&gt;. Assim que o valor -100 for detectado pelo método, é necessário que ele lance uma nova exceção: &lt;strong&gt;InvalidOperationException&lt;/strong&gt;. Quando ela for lançada, o programa sairá daquele método antes de completá-lo, fazerndo com que o assert seja um pouco diferente. Para testar se ela realmente foi lançada, primeiro armazenei o método em um delegate (eu poderia explicar o significado mas tanto a &lt;a href=&#34;https://docs.microsoft.com/pt-br/dotnet/api/system.delegate?view=net-6.0&#34;&gt;Microsoft&lt;/a&gt; quanto o &lt;a href=&#34;http://www.macoratti.net/17/01/net_deleg1.htm&#34;&gt;Macoratti&lt;/a&gt; fizeram um excelente trabalho falando sobre) e então utilizei o método Throws da classe Assert. Ele recebe o tipo da exceção como generic (&lt;a href=&#34;https://docs.microsoft.com/pt-br/dotnet/standard/generics/&#34;&gt;artigo da Microsoft&lt;/a&gt; e &lt;a href=&#34;http://www.macoratti.net/11/07/net_gen1.htm&#34;&gt;artigo do Macoratti&lt;/a&gt;) e então consegue verificar se a exceção foi lançada.&lt;/p&gt;
&lt;p&gt;Ao rodar o teste na primeira vez, ele não passoupois o método ainda não lança a exceção. Adicionei apenas 1 if para lançar a exceção e então o teste passou !&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public decimal Depositar(decimal valor)
{
    if (valor &amp;lt;= 0)
    {
        throw new InvalidOperationException(&amp;#34;Não é possível depositar valores negativos&amp;#34;);
    }
    Saldo += valor;
    return Saldo
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;⚠️⚠️Para quebrar o teste e verificar se ele não dá um falso positivo, é possível simplesmente alterar o tipo da exceção esperada no Assert.⚠️⚠️&lt;/p&gt;
&lt;p&gt;Por se tratar de um exemplo, o método de saque terá testes bastante parecidos com o do depósito, então é possível verificá-lo, assim como todo o resto do código, nesse repositório do GitHub que criei!&lt;/p&gt;
&lt;p&gt;Bem, essa foi uma breve introdução sobre testes de unidade. Na próxima parte falarei sobre &lt;strong&gt;Mocks&lt;/strong&gt; em um exemplo de uma API Rest e sobre o método &lt;strong&gt;SetUp&lt;/strong&gt;.Se curtiu, não esqueça de compartilhar a postagem!&lt;/p&gt;
&lt;p&gt;Até a próxima !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/2YgCmRh9Arduw8LshF/giphy.gif&#34; alt=&#34;Snoopy Dogg acenando em despedida&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Como usar Redis em uma solução .Net</title>
      <link>//localhost:1313/posts/dotnet-redis/</link>
      <pubDate>Mon, 29 Nov 2021 11:41:55 -0300</pubDate>
      
      <guid>//localhost:1313/posts/dotnet-redis/</guid>
      <description>&lt;p&gt;Olá!&lt;/p&gt;
&lt;p&gt;Faz algum tempo que não escrevo por aqui mas senti saudades disso. Desde que escrevi meu último artigo grande (&lt;a href=&#34;https://dev.to/cephalopodluke/introducao-a-programacao-com-dart-aji&#34;&gt;uma introdução sobre flutter&lt;/a&gt;), comecei a trabalhar com .Net e C#. É possível ver algumas semelhanças em ambas linguagens e isso facilitou bastante meu aprendizado nela.&lt;/p&gt;
&lt;p&gt;Bem, tenho desenvolvido algumas APIs e trabalhado com alguns problemas envolvendo implantações de aplicações, bem coisa de backend mesmo. Um dos primeiros problemas que precisei resolver foi implementar uma forma de uso de cache utilizando Redis em uma API.&lt;/p&gt;</description>
      <content>&lt;p&gt;Olá!&lt;/p&gt;
&lt;p&gt;Faz algum tempo que não escrevo por aqui mas senti saudades disso. Desde que escrevi meu último artigo grande (&lt;a href=&#34;https://dev.to/cephalopodluke/introducao-a-programacao-com-dart-aji&#34;&gt;uma introdução sobre flutter&lt;/a&gt;), comecei a trabalhar com .Net e C#. É possível ver algumas semelhanças em ambas linguagens e isso facilitou bastante meu aprendizado nela.&lt;/p&gt;
&lt;p&gt;Bem, tenho desenvolvido algumas APIs e trabalhado com alguns problemas envolvendo implantações de aplicações, bem coisa de backend mesmo. Um dos primeiros problemas que precisei resolver foi implementar uma forma de uso de cache utilizando Redis em uma API.&lt;/p&gt;
&lt;p&gt;Apenas para esclarecimento, cache é um local de armazenamento de dados temporários que servirão para ajudar aplicações web, mobile etc. Implementar cache na sua solução pode trazer diversos benefícios como economizar banda, reduzir tempo de resposta, realizar menos chamadas ao banco em alguns casos específicos etc. Entretanto também pode causar inúmeros problemas. Um deles é o de os dados não estarem mais atualizados em soluções que esses dados mudam frequentemente.&lt;/p&gt;
&lt;p&gt;Criei um código para esse artigo que pode ser encontrado &lt;a href=&#34;https://github.com/lukelima/ExemploRedis&#34;&gt;nesse repositório do GitHub&lt;/a&gt;. Nele, criei consumi a &lt;a href=&#34;https://pokeapi.co/&#34;&gt;PokéApi&lt;/a&gt;, uma API com dados de quase todos os pokémons lançados até hoje. Segui a política de fair use dela que diz &lt;em&gt;&amp;ldquo;Locally cache resources whenever you request them.&amp;rdquo;&lt;/em&gt; (armazene recursos em cache quando os consultar) e salvei todas as requisições em cache por um tempo limitado.&lt;/p&gt;
&lt;p&gt;A estrutura de pastas do projeto ficou da seguinte forma:za&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ExemploRedis/
├─ Controllers/
│  ├─ PokemonController.cs
├─ Extensions/
│  ├─ DistributedCacheExtension.cs
├─ Services/
│  ├─ Interfaces/
│  │  ├─ ICacheService.cs
│  │  ├─ IPokemonService.cs
│  ├─ PokemonCacheService.cs
│  ├─ PokemonService.cs
├─ Pokemon.cs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O arquivo &lt;strong&gt;Pokemon.cs&lt;/strong&gt; contém as informações de Pokémons da API. Para a simplicidade do exemplo, adicionei apenas 3 propriedades:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Pokemon
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Weight { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Adicionei o pacote &lt;strong&gt;Microsoft.Extensions.Caching.Redis&lt;/strong&gt; NuGet para trabalhar com o Redis. Com ele, criei a extensão &lt;strong&gt;Extensions/DistributedCacheExtension.cs&lt;/strong&gt; para adicionar o serviço à API:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public static IServiceCollection AddDistributedCache(
    this IServiceCollection services,
    IConfiguration configuration)
{
    services.AddDistributedRedisCache(options =&amp;gt;
    {
        options.Configuration = 
            configuration.GetConnectionString(&amp;#34;Redis&amp;#34;);
        options.InstanceName = 
            configuration[&amp;#34;Redis:InstanceName&amp;#34;];
    });
    return services;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As options da configuração são autoexplicativas: string de conexão ao serviço e nome da instância.
Adicionei essa extensão no arquivo Startup.cs, no método &lt;strong&gt;ConfigureServices&lt;/strong&gt;, com a seguinte linha de código:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;services.AddDistributedCache(Configuration);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Com o Redis configurado, desenvolvi um serviço que me auxiliaria a buscar e adicionar dados a ele visando evitar repetição de código.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface ICacheService&amp;lt;T&amp;gt;
{
    Task&amp;lt;T&amp;gt; Get(int id);
    Task Set(T content);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O código acima é da interface do serviço. Decidi usar um tipo genérico nela para que ela seja reaproveitada para qualquer objeto que eu precisar. O serviço que a implementa ficou assim:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class PokemonCacheService : ICacheService&amp;lt;Pokemon&amp;gt;
{
    private readonly IDistributedCache _distributedCache;
    private readonly DistributedCacheEntryOptions _options;
    private const string Prefix = &amp;#34;pokemon_&amp;#34;;

    public PokemonCacheService(IDistributedCache distributedCache)
    {
        _distributedCache = distributedCache;
        _options = new DistributedCacheEntryOptions
        {
            AbsoluteExpirationRelativeToNow = 
                TimeSpan.FromSeconds(120),
            SlidingExpiration = TimeSpan.FromSeconds(60)
        };
    }

    public async Task&amp;lt;Pokemon&amp;gt; Get(int id)
    {
        var key = Prefix + id;
        var cache = await _distributedCache.GetStringAsync(key);
        if (cache is null)
        {
            return null;
        }
        var pokemon = JsonConvert.DeserializeObject&amp;lt;Pokemon&amp;gt; 
            (cache);
        return pokemon;
    }

    public async Task Set(Pokemon content)
    {
        var key = Prefix + content.Id;
        var pokemonString = JsonConvert.SerializeObject(content);
        await _distributedCache.SetStringAsync(key, pokemonString, 
            _options);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Passando por todos os pontos:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;private readonly IDistributedCache _distributedCache;
private readonly DistributedCacheEntryOptions _options;
private const string Prefix = &amp;#34;pokemon_&amp;#34;;

public PokemonCacheService(IDistributedCache distributedCache)
{
    _distributedCache = distributedCache;
    _options = new DistributedCacheEntryOptions
    {
        AbsoluteExpirationRelativeToNow =   
            TimeSpan.FromSeconds(120),
        SlidingExpiration = TimeSpan.FromSeconds(60)
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Os dois primeiros campos, &lt;strong&gt;_distributedCache&lt;/strong&gt; e &lt;strong&gt;_options&lt;/strong&gt; estão relacionados diretamente à configuração do Redis. &lt;strong&gt;IDistributedCache&lt;/strong&gt; é a interface que utilizei para acessar o Redis através de injeção de dependência. Já &lt;strong&gt;DistributedCacheEntryOptions&lt;/strong&gt; é a classe responsável por configurar opções como &lt;strong&gt;AbsoluteExpirationRelativeToNow&lt;/strong&gt; e &lt;strong&gt;SlidingExpiration&lt;/strong&gt;, que referem-se ao tempo total que um dado ficará armazenado e ao tempo que ele pode ficar armazenado sem ser consultado (nunca maior que o tempo absoluto), respectivamente. &lt;strong&gt;Prefix&lt;/strong&gt; refere-se ao prefixo que utilizo para armazenar os pokemons. Utilizo ele + o id do pokemon para armazenar os dados com chaves únicas &amp;ndash; o que facilita a consulta posterior.&lt;/p&gt;
&lt;p&gt;Sobre o método Get:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public async Task&amp;lt;Pokemon&amp;gt; Get(int id)
{
    var key = Prefix + id;
    var cache = await _distributedCache.GetStringAsync(key);
    if (cache is null)
    {
        return null;
    }
    var pokemon = JsonConvert.DeserializeObject&amp;lt;Pokemon&amp;gt;(cache);
    return pokemon;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nele, crio a chave como prefixo + id do pokemon e busco o dado no cache utilizando o método &lt;strong&gt;GetStringAsync(key)&lt;/strong&gt; da interface IDistributedCache. Se ele for nulo, retorno nulo (ou poderia notificar um erro ou lançar uma exceção). Caso o contrário, deserializo a string obtida em pokemon e retorno o valor.&lt;/p&gt;
&lt;p&gt;Sobre o método Set:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public async Task Set(Pokemon content)
{
    var key = Prefix + content.Id;
    var pokemonString = JsonConvert.SerializeObject(content);
    await _distributedCache.SetStringAsync(key, pokemonString, 
        _options);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nele, crio a chave da mesma forma, com o prefixo + o id do pokemon informado, então serializo o objeto em string e armazeno no Redis utilizando o método &lt;strong&gt;SetStringAsync()&lt;/strong&gt; da interface IDistributedCache. Esse método recebe a chave que será utilizada para armazenamento (a mesma a ser consultada depois), o dado que será armazenado e as opções de armazenamento (lembra que configurei a expiração dos dados no construtor ? Pois bem, é aqui que informo essa configuração).&lt;/p&gt;
&lt;p&gt;Com o serviço de cache pronto, desenvolvi o serviço de consulta à PokéApi. Interface:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface IPokemonService
{
    Task&amp;lt;Pokemon&amp;gt; GetPokemon(int id);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;E o serviço que a implementa:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class PokemonService : IPokemonService
{
    private readonly HttpClient _httpClient;

    public PokemonService(HttpClient httpClient)
    {
        _httpClient = httpClient;
        _httpClient.BaseAddress = new 
            Uri(&amp;#34;https://pokeapi.co/api/v2/&amp;#34;);
    }

    public async Task&amp;lt;Pokemon&amp;gt; GetPokemon(int id)
    {
        var response = await 
            _httpClient.GetAsync($&amp;#34;pokemon/{id}&amp;#34;);
        var content = await response.Content.ReadAsStringAsync();
        var pokemon = JsonConvert.DeserializeObject&amp;lt;Pokemon&amp;gt; 
            (content);
        return pokemon;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O serviço é bem simples: possui um campo HttpClient que foi injetado e o método GetPokemon(int id), que faz a chamada à API e retorna um pokémon. Adicionei o HttpClient ao startup utilizando a seguinte linha de código no arquivo &lt;strong&gt;Startup.cs&lt;/strong&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    services.AddHttpClient&amp;lt;IPokemonService, PokemonService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;É importante notar que esse método adiciona tanto o client como o serviço a ser injetado por dependência.&lt;/p&gt;
&lt;p&gt;Com tudo pronto, criei um controller para servir esses dados:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[ApiController]
[Route(&amp;#34;api/[controller]&amp;#34;)]
public class PokemonController : ControllerBase
{
    private readonly IPokemonService _pokemonService;
    private readonly ICacheService&amp;lt;Pokemon&amp;gt; _pokemonCacheService;

    public PokemonController(IPokemonService pokemonService, 
        ICacheService&amp;lt;Pokemon&amp;gt; pokemonCacheService)
    {
        _pokemonService = pokemonService;
        _pokemonCacheService = pokemonCacheService;
    }

    [HttpGet(&amp;#34;{id}&amp;#34;)]
    public async Task&amp;lt;IActionResult&amp;gt; Get(int id)
    {
        Pokemon pokemon = await _pokemonCacheService.Get(id);
        if (pokemon is null)
        {
            pokemon = await _pokemonService.GetPokemon(id);
            await _pokemonCacheService.Set(pokemon);
        }
        return Ok(pokemon);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nele, injeto tanto o PokemonService quanto o CacheService pelo construtor. Como essa Api faz apenas a pesquisa de pokemons, o controller possui apenas 1 método: Get. Ele recebe um id na rota, então verifica se há no cache um pokemon com esse id. Se houver, ele retorna o pokémon. Caso não haja, ele chama o service que consultará a API e então devolve o pokémon.&lt;/p&gt;
&lt;p&gt;E esse é o fim do tutorial. Lembre-se de baixar o repositório no &lt;a href=&#34;https://github.com/lukelima/ExemploRedis&#34;&gt;GitHub&lt;/a&gt; caso queira estudá-lo melhor. Caso queira, deixei um arquivo docker-compose.yml para facilitar o uso do Redis.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Introducao à programacao com Dart</title>
      <link>//localhost:1313/posts/introducao-programacao-com-dart/</link>
      <pubDate>Mon, 06 Jan 2020 10:58:10 -0300</pubDate>
      
      <guid>//localhost:1313/posts/introducao-programacao-com-dart/</guid>
      <description>&lt;p&gt;Tenho trabalhado com Flutter há aproximadamente um ano e queria compartilhar tudo que aprendi de algum forma. Entretanto, não adianta falar sobre o framework se as pessoas não conhecem a linguagem por trás dele. Além disso, sinto falta de conteúdos voltados aos iniciantes. Assim sendo, decidi unir o útil ao agradável e criar essa pequena introdução 😊&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Não se preocupe caso não entenda algum termo no início: todos eles (ou a maioria) serão explicados ao longo do texto. Caso fique alguma dúvida, escreva um comentário ou me mande um tweet&lt;/strong&gt;&lt;/p&gt;</description>
      <content>&lt;p&gt;Tenho trabalhado com Flutter há aproximadamente um ano e queria compartilhar tudo que aprendi de algum forma. Entretanto, não adianta falar sobre o framework se as pessoas não conhecem a linguagem por trás dele. Além disso, sinto falta de conteúdos voltados aos iniciantes. Assim sendo, decidi unir o útil ao agradável e criar essa pequena introdução 😊&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Não se preocupe caso não entenda algum termo no início: todos eles (ou a maioria) serão explicados ao longo do texto. Caso fique alguma dúvida, escreva um comentário ou me mande um tweet&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Essa postagem está disponível no &lt;a href=&#34;https://github.com/lukelima/Flutter-tutoriais/blob/master/intoToDart.md&#34;&gt;meu GitHub&lt;/a&gt;. Caso haja algum erro, por favor, abra uma issue.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;dart---a-linguagem&#34;&gt;Dart - a linguagem&lt;/h2&gt;
&lt;p&gt;Criada em 2011 com foco inicial em desenvolvimento web, Dart é uma linguagem puramente orientada a objetos, baseada em classes e de herança única. É opcionalmente tipada pois dart suporta inferência de tipos (o interpretador tenta reconhecê-los por si mesmo), e o tipo de cada objeto durante o tempo de execução é uma instância da classe Type. (&lt;a href=&#34;https://dart.dev/guides/language/specifications/DartLangSpec-v2.2.pdf&#34;&gt;Especificações da linguagem&lt;/a&gt;). Isso quer dizer que tudo em Dart é um objeto, que a linguagem é fortemente baseada nas classes, o conceito fundamental da &lt;strong&gt;programação orientada a objetos&lt;/strong&gt;, e que você pode ou não declarar o tipo da sua variável.&lt;/p&gt;
&lt;h3 id=&#34;motivos-para-usar-dart&#34;&gt;Motivos para usar dart&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compilação AoT - apps criados em dart são compilados antes de serem executados, fazendo com que rodem de forma suave;&lt;/li&gt;
&lt;li&gt;sintaxe semelhante às linguagens baseadas em C. Se você desenvolve em java, não terá muita dificuldade em migrar;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pub.dev/&#34;&gt;Pub&lt;/a&gt; - por mais que o gerenciados de pacotes ainda não seja tão grande quanto o NPM, há vários pacotes voltador às plataformas nas quais a roda;&lt;/li&gt;
&lt;li&gt;open source - sim, você pode contribui com a linguagem. &lt;a href=&#34;https://github.com/dart-lang&#34;&gt;Clique aqui&lt;/a&gt; para ter acesso aos repositórios no GitHub;&lt;/li&gt;
&lt;li&gt;animações a 60 FPS em flutter;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;instalação&#34;&gt;Instalação&lt;/h2&gt;
&lt;p&gt;Não é necessário instalar as ferramentas de desenvolvimento para acompanhar esta postagem pois os mantenedores da linguagem criaram o &lt;a href=&#34;https://dartpad.dev/&#34;&gt;DartPad&lt;/a&gt;, que permite testar códigos Dart e criar aplicativos simples diretamente no seu navegador. Entretanto, caso deseje instalar, eis o passo-a-passo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clique em &lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;get dart&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;escolha o seu sistema operacional e digite os comandos no terminal ou baixe o gerenciador de instalação;
Após instalar as ferramentas para desenvolver em Dart você poderá rodar arquivos .dart através do terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ides&#34;&gt;IDEs&lt;/h2&gt;
&lt;p&gt;IDEs, ou ambientes integrados de desenvolvimento, são como editores de texto, mas com ferramentas específicas para ajudar no desenvolvimento: autocomplete, verificador de sintaxe, debuggers etc. Há vários IDEs gratuitos. Os meus preferidos são &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;, &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; e &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;, por mais que o último seja um tanto pesado para computadores com poucos recursos de memória e processamento.&lt;/p&gt;
&lt;h2 id=&#34;variáveis&#34;&gt;Variáveis&lt;/h2&gt;
&lt;p&gt;Variáveis são como caixinhas que armazenam um valor na memória. Em vez de utilizar o código hexadecimal correspondente ao lugar dessas caixinhas na memória (o endereço delas), é possível nomeá-las, facilitando o uso dos dados que elas contém.
Imagine que você precise somar o salário de todos os gastos de uma papelaria qualquer, e que para isso, apenas jogue os números em um papel (ou calculadora) a partir dos valores encontrados nos recibos&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;       1000
       1500
       2000
       1000
       1250
       1000
       1300
       1500
total: 10550
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Agora imagine que daqui a 1 ano os recibos tenham se apagado e você, por alguma razão, precise achar o valor que foi gasto com cadernos. Olhando a conta acima, conseguiria achá-lo? Não seria mais simples se houvesse uma &amp;ldquo;legenda&amp;rdquo; dizendo a quê se referem esses valores? Imagine a bagunça conforme os anos se passarem&amp;hellip;
Declarar variáveis é uma das operações fundamentais na programação. Em algumas linguagens, é algo simples como&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi = 3.14
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Em Dart, declará-las é feito de forma parecida, apenas colocando a palavra &amp;ldquo;var&amp;rdquo; atrás dos nomes, ou o tipo delas na mesma posição&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var pi = 3.14;
// ou
double pi = 3.14;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tipá-las previnirá alguns erros futuros e facilitará seu trabalho com IDEs (ambientes de desenvolvimento integrados). Entretanto, as guidelines da linguagem indicam que para variáveis locais (como aquelas dentro de funções), é preferível o uso de &amp;ldquo;var&amp;rdquo;.
Caso queira que suas variáveis não mudem, utilize a anotação &amp;ldquo;const&amp;rdquo; ou &amp;ldquo;final&amp;rdquo; antes do tipo&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;final name = &amp;#39;Bob&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Em outras linguagens há uma forma de mudar o nível de acesso das variáveis, ou seja, mudar o quanto elas podem ser vistas de fora da classe. Essa forma se dá através da utilização das palavras &amp;ldquo;protected&amp;rdquo;, &amp;ldquo;public&amp;rdquo; e &amp;ldquo;private&amp;rdquo;. Em dart, basta escrever &amp;ldquo;_&amp;rdquo; antes do nome delas para torná-las privadas.
Há dois escopos para elas: local e global. O primeiro se refere àquelas que são declaradas dentro de funções e não podem ser acessadas fora delas. O segundo, àquelas que são declaradas fora de funções e podem ser acessadas de qualquer lugar no código.&lt;/p&gt;
&lt;h3 id=&#34;como-escolher-o-nome-de-uma-variável&#34;&gt;Como escolher o nome de uma variável&lt;/h3&gt;
&lt;p&gt;Ok, é mais fácil trabalhar com o nome de uma variável do que com o endereço na memória (exemplo: 0x9cf10c). Porém não pense que nomeá-las de qualquer jeito facilitará seu trabalho.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int a = 10;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O que significa &amp;ldquo;a&amp;rdquo; ? A quê esse valor se refere ? Tudo bem, você pode saber o significado, mas e as pessoas que darão manutenção ao código? &lt;strong&gt;O computador entenderá o que significa com ou sem nome. Todo código escrito por você deve ser direcionado às pessoas que lerão ele, então facilite o trabalho delas 👍&lt;/strong&gt;.
Recomendo que leia o livro &lt;a href=&#34;https://www.amazon.com.br/C%C3%B3digo-limpo-Robert-C-Martin/dp/8576082675&#34;&gt;Código limpo&lt;/a&gt; para uma abordagem mais completa sobre o assunto.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A linguagem não aceita que os nomes comecem por números, nem que contenham espaços em branco ou caracteres especiais(com exceção de &amp;ldquo;$&amp;rdquo; e &amp;ldquo;_&amp;rdquo;), e muito menos que seja uma das &lt;a href=&#34;https://dart.dev/guides/language/language-tour#keywords&#34;&gt;palavras reservadas&lt;/a&gt; dela.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// errado
int 1Numero = 10;

//correto  
int umNumero = 10;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;algoritmos&#34;&gt;Algoritmos&lt;/h2&gt;
&lt;p&gt;É um tanto clichê falar que algoritmos são como receitas culinárias, mas são mesmo: uma sequência de instruções para a execução de uma tarefa. Pense nos ingredientes como &amp;ldquo;variáveis&amp;rdquo;, e no modo de preparo como a execução do seu programa. Veja uma receita simples de brigadeiro (o máximo que consigo fazer em uma cozinha 🤣):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingredientes:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 caixa de leite condensado;
3 colheres (sopa) de achocolatado;
1 colher (sopa) de manteiga;
1 xícara (chá) de chocolate granulado
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Podemos dizer que o nome de cada ingrediente é igual ao nome de uma variável, e que a quantidade dos ingredientes, o valor delas. Assim sendo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int caixaDeLeiteCondensado = 1;
int colheresDeAchocolatado = 3;
int colherDeManteiga = 1;
int xicaraDeChocolateGranulado = 1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Quanto ao modo de preparo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 - Adicione o leite condensado, o achocolatado e a manteiga em uma panela;
2 - misture em fogo baixo por 10 minutos;
3 - deixe esfriar em um prato untado;
4 - enrole a mistura e adicione granulado;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Em código usando funções (última sessão do artigo):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var mistura = adicionarNaPanela(caixaDeLeiteCondensado, colheresDeAchocolatado, colherDeManteiga);
misturarEmFogoBaixo(mistura);
deixarEsfriar(mistura, pratoUntado);
enrolarEGranular(mistura);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;É claro, há vários níveis de complexidade para algoritmos de uma mesma tarefa: você pode dizer que começa o dia levantando da cama, ou pode ser mais profundo e dizer que começa abrindo os olhos, se espreguiçando, levantando o tronco, sentando na cama&amp;hellip;
Algoritmos são a base da programação. E pasme: você aprenderá sobre algumas ferramentas durante sua vida profissional, mas a maioria dos seus problemas iniciais será resultante da falta de prática com algoritmos, não com as ferramentas em si!&lt;/p&gt;
&lt;p&gt;**NUNCA SE ESQUEÇA DE UTILIZAR ; (PONTO E VÍRGULA) AO FINAL DE CADA INSTRUÇÃO&lt;/p&gt;
&lt;h2 id=&#34;comentários&#34;&gt;Comentários&lt;/h2&gt;
&lt;p&gt;Comentários servem para escrever uma mensagem no código que não será interpretada pelo computador. Essa mensagem costuma ser criada para documentar o código (explicá-lo), mas não se engane: a necessidade de diversos comentários pode ser indicativo de que a escolha dos nomes das variáveis e funções, ou o uso delas, não está claro o suficiente. Um código bem escrito deve falar por si só.
Dart suporta 3 tipos de comentários:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;os de 1 única linha&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// esse é um comentário de linha única
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;os de múltiplas linhas&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*
  Esse é um comentário em
  múltiplas linhas
*/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;os de documentação&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/// comentários de documentação podem começar com 3 barras invertidas ou /**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Boa parte dos resultados de instruções neste texto foram escritos em comentários na frente delas.&lt;/p&gt;
&lt;h2 id=&#34;tipos-de-dados&#34;&gt;Tipos de dados&lt;/h2&gt;
&lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String nome = &amp;#39;Lucas&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Strings são as representações de frases, palavras, caracteres etc. Sempre que for necessário armazenar uma das opções citadas, declare uma string com as palavras dentro de aspas simples (&amp;rsquo;&amp;rsquo;) ou duplas(&amp;quot;&amp;quot;). Elas são as responsáveis por textos em interfaces de sites e aplicativos. Em &lt;strong&gt;flutter&lt;/strong&gt;, por exemplo, são o tipo de dado esperado pelo widget Text()&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Text(&amp;#34;Digite o seu nome: &amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Métodos são blocos de código na forma de funções (veja ao final da postagem) que facilitam o trabalho com dados de determinados tipos. Como exemplo para strings temos &amp;ldquo;toUpperCase()&amp;rdquo;, que transforma a string em letras maiúsculas, ou &amp;ldquo;split()&amp;rdquo;, que separa ela em uma lista de caracteres. Esse tipo também conta com algumas propriedades, como &amp;ldquo;length&amp;rdquo;, que conta o número de caracteres (espaços em branco também), que, como métodos, também são acessadas utilizando um &amp;ldquo;.&amp;rdquo; após o nome da variável e o nome da propriedade em seguida&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String meuNome = &amp;#34;Lucas&amp;#34;;
  
print(meuNome.toLowerCase()); // lucas
print(meuNome.toUpperCase()); // LUCAS
print(meuNome.length);        // 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;É possível concatenar duas ou mais strings, unindo-as uma única.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String nome = &amp;#34;Lucas&amp;#34;;
String sobrenome = &amp;#34;Silva&amp;#34;;

print(nome + &amp;#39; &amp;#39; + sobrenome);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Repare no espaço em branco entre as variáveis. Dart possui suporte à interpolação, que é uma maneira de criar strings sem a necessidade do operador &amp;ldquo;+&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;$variavel&amp;rdquo; para expressões simples&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String nome = &amp;#34;Lucas&amp;#34;;
String sobrenome = &amp;#34;Silva&amp;#34;;
print(&amp;#34;$nome $sobrenome&amp;#34;); // Lucas Silva
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&amp;ldquo;${variavel.metodo}&amp;rdquo; para expressões mais complexas&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String nome = &amp;#34;Lucas&amp;#34;;
String sobrenome = &amp;#34;Silva&amp;#34;;
print(&amp;#34;${nome.toUpperCase()} $sobrenome&amp;#34;); // LUCAS Silva
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;números&#34;&gt;Números&lt;/h3&gt;
&lt;p&gt;Dizem que ciências da computação requerem muita matemática. &lt;em&gt;É e não é verdade&lt;/em&gt;. Não precisa ser doutor em matemática para saber programar, mas não deixará os números de lado.
Você pode ter ouvido falar que os computadores entendem códigos binários e tal. Esse tipo de abordagem aos números (&amp;ldquo;binários&amp;rdquo;) se refere à base deles. Podemos utilizar binários, hexadecimais (muito utilizados em cores), octais, decimais etc.
Os números possuem basicamente dois tipos: os inteiros e os decimais. O primeiro tipo é comumente chamado de &amp;ldquo;int&amp;rdquo;. O segundo, em algumas linguagens, é chamado de &amp;ldquo;float&amp;rdquo; enquanto em outras, como  dart, é chamado de &amp;ldquo;double&amp;rdquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int umNumero = 10;
double pi = 3.14;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Várias operações matemáticas estão disponíveis para esse tipo de dados. Arredondamento, Máximo divisor comum, checar se um número é par ou ímpar etc.&lt;/p&gt;
&lt;h3 id=&#34;boolean&#34;&gt;Boolean&lt;/h3&gt;
&lt;p&gt;É um tipo de dados que representa 1 ou 0, sendo esses verdadeiro ou falso, respectivamente (embora essa correspondência não seja válida em Dart). Possui esse nome em homenagem a George Boole, que definiu um sistema de lógica algébrica. São muito utilizados em expressões, principalmente as condicionais.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bool verdade = true;
bool mentira = false;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;listas&#34;&gt;Listas&lt;/h3&gt;
&lt;p&gt;É difícil falar que algum tipo de dado é mais importante que o outro, mas sério, aprenda &lt;strong&gt;tudo&lt;/strong&gt; sobre listas. Saber manipular dados corretamente é o primeiro passo para conseguir um emprego na área.
Por mais que o interpretador consiga entender o tipo, é sempre interessante tipar suas variáveis para evitar erros. Logo, listas se declarariam da seguinte forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;int&amp;gt; listaDeNumeros = [1, 2, 3];
List&amp;lt;String&amp;gt; vogais = [&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Listas são como coleções de valores. As notificações de um usuário no Instagram, por exemplo, são listas de objetos chamados Notificações (veremos sobre Programação orientada a objetos na próxima postagem). A famosa lista de tarefas (todo List) é uma lista de&amp;hellip; adivinha? Tarefas!
Já utilizou Todoist ? Pense assim:
O app é basicamente uma lista. Nessa lista, é possível adicionar e remover tarefas. Essas operações são feitas em Dart utilizando &amp;ldquo;add()&amp;rdquo;/&amp;ldquo;insert()&amp;rdquo; e remove(). O legal é que insert pode utilizar o index do novo elemento, e é possível procurar diretamente pelo elemento a ser removido no remove. Também é possível remover todas as tarefas da lista utilizando &amp;ldquo;clear()&amp;rdquo;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;String&amp;gt; vogais = [&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;];
vogais.add(&amp;#39;r&amp;#39;); // [&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;r&amp;#39;]
vogais.remove(&amp;#39;r&amp;#39;); // [&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;]
vogais.remove(&amp;#39;e&amp;#39;); // [&amp;#39;a&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;]
vogais.insert(1, &amp;#39;e&amp;#39;); //[&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;]
vogais.clear(); // [] &amp;lt;- lista vazia
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Index, ou índices, são as posições dos elementos em uma lista. Na maioria das linguagens a contagem começa por 0. Nunca se esqueça disso!
Adicionar uma lista à outra se tornou mais simples a partir da versão 2.3 da linguagem, na qual introduziu-se o &amp;ldquo;spread operator&amp;rdquo;. Caso o valor à direita possa ser null, utilize o null-aware spread operator (última linha do código) para evitar erros na execução do código.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;int&amp;gt; lista1 = [4, 5];
List&amp;lt;int&amp;gt; lista2 = [1, 2, 3, ...lista1]; // spread operator -&amp;gt;...lista1 copia os elementos
List&amp;lt;int&amp;gt; lista3 = [...?lista2]; // null-aware spread operator 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Outras novidades são &amp;ldquo;collection if&amp;rdquo; e &amp;ldquo;collection for&amp;rdquo;, onde as listas são criadas através de uma condição ou de um loop.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/// collection if
List&amp;lt;String&amp;gt; listaDeCompras = [&amp;#39;chocolate&amp;#39;, &amp;#39;refrigerante&amp;#39;, if(estiveremEmPromocao)];

// collection for
List&amp;lt;int&amp;gt; primeiraListaDeNumeros = [3, 4, 5, 6];
List&amp;lt;int&amp;gt; segundaListaDeNumeros = [1, 2, for(int numero in primeiraListaDeNumeros) numero];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Uma propriedade útil das listas é &amp;ldquo;length&amp;rdquo;, que retorna o número de elementos dentro delas.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;int&amp;gt; listaDeNumeros = [1, 2, 3];
print(listaDeNumeros.length); // 3
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;conjuntos-sets&#34;&gt;Conjuntos (Sets)&lt;/h3&gt;
&lt;p&gt;Conjuntos em Dart são como conjuntos matemáticos: a ordem e a quantidade de vezes que um elemento aparece não possuem importância. Para utilizá-los, é necessário colocar um tipo antes de {}. Caso contrário, o interpretador entenderá que se trata de um Map.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var conjuntoDeNumeros = &amp;lt;int&amp;gt;{};
print(conjuntoDeNumeros is Set); // true

var outroConjuntoDeNumeros = {};
print(outroConjuntoDeNumeros is Set); // false

var letras = &amp;lt;String&amp;gt;{&amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;c&amp;#39;};
print(letras); // {a, b, c}, pois elementos repetidos não importam para conjuntos
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mapas&#34;&gt;Mapas&lt;/h3&gt;
&lt;p&gt;Mapas são objetos que associam chaves, em strings, a valores que podem ser de qualquer tipo! Apesar dos valores poderem se repetir, as chaves devem ser únicas.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Map&amp;lt;String, dynamic&amp;gt; listaDeCompras = {
    &amp;#39;chocolates&amp;#39;: 2,
    &amp;#39;refrigerantes&amp;#39;: 4,
    &amp;#39;carne&amp;#39;: 1.5 // quilos
};

// Ou através do construtor Map()
var listaDeCompras = Map();
listaDeCompras[&amp;#39;chocolates&amp;#39;] = 2;
listaDeCompras[&amp;#39;refrigerantes&amp;#39;] = 4;
listaDeCompras[&amp;#39;carne&amp;#39;] = 1.5;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Os valores de um mapa podem ser acessados da mesma forma que construímos a variável com o construtor Map():&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(listaDeCompras[&amp;#39;chocolates&amp;#39;]); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;São utilizados na construção de objetos a partir de &lt;strong&gt;dados fornecidos por uma API ou query&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;runas&#34;&gt;Runas&lt;/h3&gt;
&lt;p&gt;Strings em Dart são uma sequência de caracteres Unicode no formato UTF-16. Um caractere unicode é escrito da seguinte forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\u2665    // ♥
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As runas expõe o unicode de um string e podem ser usadas para formar caracteres especiais como símbolos e emojis.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Runes coracao = Runes(&amp;#39;\u2665&amp;#39;);
print(String.fromCharCodes(coracao)); // ♥
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;símbolos&#34;&gt;Símbolos&lt;/h3&gt;
&lt;p&gt;Símbolos são nomes (strings) utilizados para refletir metadados de uma biblioteca de códigos ou API. Essas informações costumam ser otimizadas para que o computador as interprete, e os símbolos servem para torná-las mais legível para nós, humanos. Nome de classes, métodos e libs podem ser símbolos.
Confesso que não vejo a utilização deles com frequência e os exemplos em relação a eles são quase sempre iguais a esse aqui:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3adda.com/dart-tutorial/dart-symbol&#34;&gt;Dart Symbol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dynamic&#34;&gt;Dynamic&lt;/h3&gt;
&lt;p&gt;Essa é uma declaração responsável por permitir que qualquer valor seja atribuido a uma variável. É preferível declarar uma variável com dynamic do que deixar a inferência falhar. Entretanto é recomendado utilizar &amp;ldquo;Object&amp;rdquo; em vez dele, deixando-o para quando for necessário dinamismo em uma parte do programa ou quando os valores virão de uma interoperabilidade entre JS/Kotlin, por exemplo.&lt;/p&gt;
&lt;h2 id=&#34;operadores&#34;&gt;Operadores&lt;/h2&gt;
&lt;p&gt;Operadores são como os sinais matemáticos: pegam dois ou mais valores e transformam em um resultado diferente. Há diversos tipos de operadores, então o uso deles não se restringe a números. Vimos, por exemplo, a concatenação de strings utilizando o sinal &amp;ldquo;+&amp;rdquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(&amp;#34;Hello&amp;#34; + &amp;#34; World!&amp;#34;); // Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;operadores-aritméticos&#34;&gt;Operadores aritméticos&lt;/h3&gt;
&lt;p&gt;São os mesmos que utilizamos em contas. Considere:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;double umNumero = 10.0;
double outroNumero = 4.0;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;então:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash; soma dois valores (podendo ser strings);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero + outroNumero); // 14
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash; subtrai o segundo valor do primeiro;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero - outroNumero); // 6
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash; multiplica ambos os valores;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero * outroNumero); // 40
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;/ &amp;ndash; divide o primeiro valor pelo segundo;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero / outroNumero); // 2.5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;~/ &amp;ndash; divide o primeiro valor pelo segundo mas retorna um número inteiro, sem parte fracionada;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero ~/ outroNumero); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;% &amp;ndash; divide o primeiro valor pelo segundo e retorna o resto da divisão&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero % outroNumero); // 2, pois 10 / 4 = 8, com resto = 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A ordem de precedência pode ser consultada &lt;a href=&#34;https://dart.dev/guides/language/language-tour#operators&#34;&gt;nessa tabela&lt;/a&gt;, mas pode ser alterada usando parênteses &amp;ldquo;()&amp;rdquo;, como em contas matemáticas.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 + 2 * 3 

é diferente de

(1 + 2) * 3
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;operadores-de-incremento&#34;&gt;Operadores de incremento&lt;/h3&gt;
&lt;p&gt;São aqueles que aumentam ou diminuem a variável em 1. São divididos em dois tipos: prefixo, que aumenta a variável e depois avalia a expressão, e &lt;em&gt;postfix&lt;/em&gt; (como um sufixo), que só aumenta a variável após avaliar a expressão&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Postfix:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;variavel++;
variavel--;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Prefixo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;++variavel;
--variavel;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;operadores-de-igualdade-e-relacionais&#34;&gt;Operadores de igualdade e relacionais&lt;/h3&gt;
&lt;p&gt;São aqueles usados para comparar valores. Considere:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;double umNumero = 10.0;
double outroNumero = 4.0;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Então:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;== &amp;ndash; retorna true se os valores forem iguais e falso se forem diferentes;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero == outroNumero); // false
print(umNumero == umNumero); // true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;!= &amp;ndash; retorna true se os valores forem diferentes;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero != outroNumero); // true
print(umNumero != umNumero); // false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ndash; retorna true se o primeiro valor for maior que o segundo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero &amp;gt; outroNumero); // true
print(outroNumero &amp;gt; umNumero); // false
print(umNumero &amp;gt; umNumero); // false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&amp;lt;  &amp;ndash; retorna true se o primeiro valor for menor que o segundo;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero &amp;lt; outroNumero); // false
print(outroNumero &amp;lt; umNumero); // true
print(umNumero &amp;lt; umNumero); // false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;= &amp;ndash; retorna true se o primeiro valor for maior ou igual ao segundo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero &amp;gt;= outroNumero); // true
print(outroNumero &amp;gt;= umNumero); // false
print(umNumero &amp;gt;= umNumero); // true, pois os números são iguais
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&amp;lt;= &amp;ndash; retorna true se o primeiro valor for menor ou igual ao segundo;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(umNumero &amp;lt;= outroNumero); // false
print(outroNumero &amp;lt;= umNumero); // true
print(umNumero &amp;lt;= umNumero); // true, pois os números são iguais
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;operadores-de-teste-de-tipos&#34;&gt;Operadores de teste de tipos&lt;/h3&gt;
&lt;p&gt;São úteis para converter ou checar tipos de dados. Considere:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int num = 10;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;as  &amp;mdash; converte o tipo de um objeto. Pode ser utilizado como uma versão enxuta do operador &amp;ldquo;is&amp;rdquo;;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (emp is Person) {
  // Type check
  emp.firstName = &amp;#39;Bob&amp;#39;;
}

// com o operador &amp;#34;as&amp;#34;
(emp as Person).firstName = &amp;#39;Bob&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;is  &amp;mdash; retorna true se o valor for de um determinado tipo;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(num is int); // true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;is! &amp;mdash; retorna true se o valor não for de um determinado tipo;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(num is! String); // true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;operadores-de-atribuição&#34;&gt;Operadores de atribuição&lt;/h3&gt;
&lt;p&gt;São aqueles que atribuem valores às variáveis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=   &amp;mdash; utilizado para atribuir um valor a uma variável&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int umNumero = 2;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;+=  &amp;mdash; utilizado para somar um valor ao valor já existente na variável&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int umNumero = 2;
umNumero += 3;
print(umNumero); // 5, pois é o mesmo que umNumero = umNumero + 3
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-=  &amp;mdash; utilizado para subtrair um valor ao valor já existente na variável&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int umNumero = 2;
umNumero += 1;
print(umNumero); // 1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;*=  &amp;mdash; utilizado para multiplicar um valor ao valor já existente na variável&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int umNumero = 2;
umNumero *= 2;
print(umNumero); // 4
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;/=  &amp;mdash; utilizado para dividir um valor ao valor já existente na variável&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;double umNumero = 2.0;
umNumero /= 2;
print(umNumero); // 1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;~/= &amp;mdash; utilizado para dividir arredondando para baixo um valor ao valor já existente na variável&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int umNumero = 5;
umNumero ~/= 2;
print(umNumero); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;operadores-lógicos&#34;&gt;Operadores lógicos&lt;/h3&gt;
&lt;p&gt;Servem para trabalhar com operações booleanas, que podem inverter ou não o fluxo de execução de um programa.
Considere:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bool verdade = true;
bool mentira = false;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Então:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;!expressão &amp;mdash; inverte o valor da expressão.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(!verdade); // false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&amp;amp;&amp;amp; &amp;mdash; retorna true se ambas as expressões forem verdadeiras.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(verdade &amp;amp;&amp;amp; verdade); // true
print(verdade &amp;amp;&amp;amp; mentira); // false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;|| &amp;mdash; retorna true se uma das expressões for verdadeira.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(verdade || verdade); // true
print(verdade || mentira); // true
print(mentira || mentira); // false
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;notação-de-cascata&#34;&gt;Notação de cascata&lt;/h3&gt;
&lt;p&gt;A ideia da notação de cascata é evitar que seja necessária a criação de variáveis temporárias, permitindo o acesso a um mesmo objeto linha após linha.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;querySelector(&amp;#39;#confirm&amp;#39;) // Pega um objeto
  ..text = &amp;#39;Confirm&amp;#39; // Usa as propriedades dele
  ..classes.add(&amp;#39;important&amp;#39;)
  ..onClick.listen((e) =&amp;gt; window.alert(&amp;#39;Confirmed!&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;outros-operadores&#34;&gt;Outros operadores&lt;/h3&gt;
&lt;p&gt;São os responsáveis por chamadas de função e acesso a listas e propriedades de objetos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;() &amp;ndash; chamada de função&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// definir a função
void helloWorld() {
  print(&amp;#34;Hello World!&amp;#34;);
}

//chamar a função
helloWorld();
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;[] &amp;ndash; acesso a elementos de lista&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;int&amp;gt; listaDeNumeros = [1, 2, 3, 4, 5];
int segundoNumeroDaLista = listaDeNumeros[1]; // pois os índices começam por 0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;.  &amp;ndash; acesso a alguma propriedade de uma expressão. Um exemplo é o acesso à propriedade &lt;em&gt;length&lt;/em&gt; de uma lista, que retorna o número de elementos nela&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;String&amp;gt; vogais = [&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;];
print(vogais.length); // 5
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sentenças-de-controle-de-fluxo&#34;&gt;Sentenças de controle de fluxo&lt;/h2&gt;
&lt;h3 id=&#34;condicionais&#34;&gt;Condicionais&lt;/h3&gt;
&lt;p&gt;É possível testar as condições no seu programa para que ele rode pedaços de código diferentes para cada uma delas. Pense na seguinte sentença:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;strong&gt;Se&lt;/strong&gt; o usuário estiver logado, (2) &lt;strong&gt;então&lt;/strong&gt; poderá acessar a página inicial. (3) &lt;strong&gt;Caso contrário&lt;/strong&gt;, (4) será direcionado para a página de Login. Traduzindo para o código:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if(usuarioEstiverLogado) { // 1
  redirecionarParaPaginaInicial(); // 2
} else { // 3
  redirecionarParaPaginaDeLogin(); // 4
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Perceba os números na frase e no código. Eles traduzem a forma na qual as condicionais funcionam:
1 - if &amp;ndash; se(condição a ser testada)
2 - código a ser executado se a condição for verdadeira
3 - else &amp;ndash; caso contrário
4 - código executado caso a condição do número 1 seja falsa.
Outro exemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se o aluno tiver média &lt;strong&gt;maior ou igual&lt;/strong&gt; a 7 &lt;strong&gt;e&lt;/strong&gt; frequência &lt;strong&gt;maior&lt;/strong&gt; que 75%, será aprovado.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if(media &amp;gt;= 7 &amp;amp;&amp;amp; frequencia &amp;gt; 75) {
  print(&amp;#34;O aluno foi aprovado!&amp;#34;);
} else {
  print(&amp;#34;O aluno foi reprovado!&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As palavras em negrito correspondem aos operadores &amp;lsquo;&amp;gt;=&amp;rsquo;, &amp;amp;&amp;amp; e &amp;gt;. Agora, e se eu quiser testar a seguinte condição:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se o aluno tiver média &lt;strong&gt;maior ou igual&lt;/strong&gt; a 7, será aprovado. Caso a média seja maior ou igual a 5 e menor que 7, ficará em recuperação. Caso contrário, será reprovado.
Há duas condições a serem testadas: se ele será aprovado, ou se ficará de recuperação (apenas duas, pois qualquer nota menor que 5 fará com que ele seja reprovado). Nesse tipo de situação, utilizamos as palavras reservadas &amp;ldquo;else if&amp;rdquo;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if(media &amp;gt;= 7) { // primeira condição
  print(&amp;#34;O aluno foi aprovado&amp;#34;);
} else if (media &amp;gt;= 5 &amp;amp;&amp;amp; media &amp;lt; 7) { // segunda condição
  print(&amp;#34;O aluno ficou em recuperação&amp;#34;);
} else { // qualquer outra condição
  print(&amp;#34;O aluno foi reprovado&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ternário&#34;&gt;Ternário&lt;/h3&gt;
&lt;p&gt;O operador ternário funciona como o &amp;ldquo;if&amp;rdquo;, mas a sintaxe dele é mais enxuta:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;media &amp;gt;= 7 ? print(&amp;#34;O aluno foi aprovado&amp;#34;) : print(&amp;#34;O aluno foi reprovado&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A sintaxe funciona da mesma forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;condição a ser testada ? código caso seja verdadeira : código caso seja falsa. 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;É possível encadear várias sentenças no ternário. O mesmo exercício do if-else ficaria assim:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;media &amp;gt;= 7 ? print(&amp;#34;O aluno foi aprovado&amp;#34;) : media &amp;gt;= 5 ? print(&amp;#34;O aluno ficou em recuperação&amp;#34;) : print(&amp;#34;O aluno foi reprovado&amp;#34;); 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;switch---case&#34;&gt;Switch - case&lt;/h3&gt;
&lt;p&gt;Em vez de usar vários &amp;ldquo;ifs&amp;rdquo; e &amp;ldquo;elses&amp;rdquo;, use switch-case (&lt;strong&gt;nem sempre é recomendado por questão de performance&lt;/strong&gt;). A sintaxe funciona assim:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch(variavel) {
    case(&amp;#39;caso1&amp;#39;):
        print(&amp;#39;caso1&amp;#39;);
        break;
    default:
        print(&amp;#39;qualquer mensagem padrão&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Os possíveis valores da variável devem ser escritos dentro dos casos (case), e na linha seguinte, as instruções para aquela determinada condição. Ao final há a palavra-chave &amp;ldquo;break&amp;rdquo;, que indica que o programa pode executar as sentenças seguintes ao switch. Se essa palavra for esquecida, ocorrerá uma erro durante a execução.
Se mais de um caso for executar as mesmas sequências, é possível utilizar &amp;ldquo;casos vazios&amp;rdquo;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch(variavel) {
    case(&amp;#39;caso1&amp;#39;):
    case(&amp;#39;caso2&amp;#39;):
    case(&amp;#39;caso3&amp;#39;):
        print(&amp;#39;Qualquer mensagem&amp;#39;);
        break;
    default:
        print(&amp;#39;qualquer mensagem padrão&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;laços-de-repetição----while&#34;&gt;Laços de repetição &amp;ndash; While&lt;/h3&gt;
&lt;p&gt;Partes de um código costumam ser repetidas durante a execução. Entretanto, não é necessário escrevê-las várias vezes! Para isso, utiliza-se os laços de repetição!
O &lt;strong&gt;while&lt;/strong&gt; é um laço que executa um determinado bloco de código &lt;strong&gt;enquanto&lt;/strong&gt; uma condição for verdadeira. Com ele é possível realizar algoritmos simples, como contar números, e até aplicações mais práticas, como por exemplo o &lt;a href=&#34;https://developer.wordpress.org/themes/basics/the-loop/&#34;&gt;loop de postagens do WordPress&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int contador = 0;
while(contador &amp;lt; 10) {
  print(contador);
  contador++;
}

Resultado:
0
1
2
3
4
5
6
7
8
9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Todo o código localizado entre &amp;ldquo;{}&amp;rdquo; será executado repetidas vezes até que a condição deixe de ser verdadeira. Preste muita atenção na última expressão.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;contador++;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O contador aumentará em 1 toda vez que o código se repetir até que a condição seja falsa. &lt;strong&gt;O que acontecerá nos esquecermos de incrementá-lo?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;laços-de-repetição----do-while&#34;&gt;Laços de repetição &amp;ndash; Do While&lt;/h3&gt;
&lt;p&gt;Esse laço é parecido com o anterior. A diferença é que o while checa a condição e depois executa o código. Já o do while executa o código e depois checa. Veja a diferença em um algoritmo com a mesma lógica:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int contador1 = 1;
while(contador1 &amp;lt; 1) {
  print(&amp;#34;contador1: $contador1&amp;#34;);
  contador1++;
}

Resultado: nada é exibido no console.
  
int contador2 = 1;
do {
  print(&amp;#34;contador2: $contador2&amp;#34;);
  contador2++;
} while(contador2 &amp;lt; 1);

Resultado:
contador2: 1
&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;laços-de-repetição----for&#34;&gt;Laços de repetição &amp;ndash; For&lt;/h3&gt;
&lt;p&gt;Esse laço é comumente utilizado em conjunto com listas, pois pode usar o número de elementos delas como &amp;ldquo;contador&amp;rdquo; da repetição.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sintaxe tradicional:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;int&amp;gt; listaDeNumeros = [1, 2, 3, 4, 5];
for(int i = 0; i &amp;lt; listaDeNumeros.length; i++) {
  print(listaDeNumeros[i]);
}
//Resultado:
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;for&amp;hellip;in:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;int&amp;gt; listaDeNumeros = [1, 2, 3, 4, 5];
for(int i in listaDeNumeros) {
  print(i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;forEach() &amp;ndash; um método das listas que realiza uma ação programada para cada elemento em uma determinada lista:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;int&amp;gt; listaDeNumeros = [1, 2, 3, 4, 5];
listaDeNumeros.forEach((numero) {
  print(numero);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pense que &amp;ldquo;numero&amp;rdquo; é como o nome de uma variável que, durante cada repetição terá um valor na lista seguindo uma ordem sequencial.&lt;/p&gt;
&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tipo nomeDaFuncao(parametros) {
  declarações a serem executadas
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A parte mais interessante desse texto. As funções são blocos de código que executam alguma operação. Quando utilizadas sozinhas, são chamadas de &lt;strong&gt;funções&lt;/strong&gt;. Quando associadas a algum objeto, são chamadas de &lt;strong&gt;métodos&lt;/strong&gt;. Algumas delas foram demonstradas ao longo dessa postagem. &amp;ldquo;stringQualquer.toUppercase()&amp;rdquo; é uma delas.
A mais importante em programas Dart é a função main(), pois é a responsável por executar todo o código. Sempre que abrir o DartPad, o editor virá com ela preenchida.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void main() {
  // digite o código aqui
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A palavra &amp;ldquo;void&amp;rdquo; significa que a função não possui um valor de retorno. As funções podem retornar algum valor, que é geralmente o resultado das instruções executadas dentro delas. No caso de uma função de soma, é comum que ela retorne o resultado da soma dos números passados como argumento.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int soma(int umNumero, int outroNumero) {
  return umNumero + outroNumero; // o valor de retorno (return) será o resultado da expressão.
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Perceba que declarei duas variáveis dentro dos parênteses: int umNumero e int outroNumero, mas não atribui um valor a elas. Essas variáveis, chamadas de &lt;strong&gt;argumentos&lt;/strong&gt;, terão seus valores atribuídos durante a chamada da função e separados por uma vírgula:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(soma(1, 2)); // 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;É possível utilizar o valor de retorno de uma função como argumento de outra função. Essa é uma abordagem de um outro &lt;strong&gt;paradigma de programação&lt;/strong&gt;, que trataremos em uma postagem próxima.&lt;/p&gt;
&lt;h2 id=&#34;fontes&#34;&gt;Fontes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/language/language-tour&#34;&gt;Language tour | Dart&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/guides/language/effective-dart/design#prefer-annotating-with-dynamic-instead-of-letting-inference-fail&#34;&gt;Effective Dart: Design&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dart.dev/platforms&#34;&gt;Platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/50012596/how-does-dart-aot-work&#34;&gt;How Does Dart AOT Work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/why-flutter-uses-dart-dd635a054ebf&#34;&gt;Why Flutter Uses Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
